import { __decorate } from "tslib";
import { Component, ViewChild, forwardRef, ViewEncapsulation } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { EditorState } from 'prosemirror-state';
import { EditorView } from 'prosemirror-view';
import { NgxEditorService, NgxEditorServiceConfig } from './ngx-editor.service';
var NgxEditorComponent = /** @class */ (function () {
    function NgxEditorComponent(ngxEditorService) {
        this.editorInitialized = false;
        this.config = ngxEditorService.config;
    }
    NgxEditorComponent_1 = NgxEditorComponent;
    NgxEditorComponent.prototype.writeValue = function (value) {
        if (!this.editorInitialized) {
            return;
        }
        this.updateContent(value);
    };
    NgxEditorComponent.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    NgxEditorComponent.prototype.registerOnTouched = function () { };
    NgxEditorComponent.prototype.parseDoc = function (contentJson) {
        if (!contentJson) {
            return null;
        }
        var schema = this.config.schema;
        return schema.nodeFromJSON(contentJson);
    };
    NgxEditorComponent.prototype.updateContent = function (value) {
        try {
            var doc = this.parseDoc(value);
            var state = this.view.state;
            // don't emit if both content is same
            if (doc !== null && state.doc.eq(doc)) {
                return;
            }
            var tr = state.tr;
            tr.replaceWith(0, state.doc.content.size, doc);
            this.view.dispatch(tr);
        }
        catch (err) {
            console.error('Unable to update document.', err);
        }
    };
    NgxEditorComponent.prototype.handleTransactions = function (tr) {
        var state = this.view.state.applyTransaction(tr).state;
        this.view.updateState(state);
        if (tr.docChanged && this.onChange) {
            var json = state.doc.toJSON();
            this.onChange(json);
        }
    };
    NgxEditorComponent.prototype.createEditor = function () {
        var _a = this.config, schema = _a.schema, plugins = _a.plugins, nodeViews = _a.nodeViews;
        this.view = new EditorView(this.ngxEditor.nativeElement, {
            state: EditorState.create({
                schema: schema,
                plugins: plugins
            }),
            nodeViews: nodeViews,
            dispatchTransaction: this.handleTransactions.bind(this),
            attributes: {
                class: 'NgxEditor__Content'
            },
        });
        this.editorInitialized = true;
    };
    NgxEditorComponent.prototype.ngOnInit = function () {
        this.createEditor();
    };
    NgxEditorComponent.prototype.ngOnDestroy = function () {
        this.view.destroy();
    };
    var NgxEditorComponent_1;
    NgxEditorComponent.ctorParameters = function () { return [
        { type: NgxEditorService }
    ]; };
    __decorate([
        ViewChild('ngxEditor', { static: true })
    ], NgxEditorComponent.prototype, "ngxEditor", void 0);
    NgxEditorComponent = NgxEditorComponent_1 = __decorate([
        Component({
            selector: 'ngx-editor',
            template: "<div class=\"NgxEditor\" #ngxEditor></div>\n",
            providers: [{
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return NgxEditorComponent_1; }),
                    multi: true
                }],
            encapsulation: ViewEncapsulation.None,
            styles: [".NgxEditor{background:padding-box #fff;color:#000;border-radius:4px;border:2px solid rgba(0,0,0,.2)}.NgxEditor__MenuBar{display:flex;padding:.2rem;border-bottom:1px solid #ddd;cursor:default;height:1.85rem}.NgxEditor__MenuItem{border-radius:2px;display:flex;align-items:center;justify-content:center}.NgxEditor__MenuItem:hover{background-color:#f1f1f1}.NgxEditor__MenuItem.NgxEditor__MenuItem--Icon{height:1.85rem;width:1.85rem;transition:.3s ease-in-out;margin-right:2px}.NgxEditor__MenuItem.NgxEditor__MenuItem--Text{padding:0 .3rem}.NgxEditor__MenuItem.NgxEditor__MenuItem--Active{background-color:#e8f0fe;color:#1a73e8}.NgxEditor__MenuItem.NgxEditor__MenuItem--Active svg{fill:#1a73e8}.NgxEditor--Disabled{opacity:.5;pointer-events:none}.NgxEditor__Seperator{border-left:1px solid #ccc;margin:0 .3rem}.NgxEditor__Dropdown{min-width:4rem;position:relative;display:flex;align-items:center}.NgxEditor__Dropdown:hover{background-color:#f1f1f1}.NgxEditor__Dropdown .NgxEditor__Dropdown__Text{display:flex;align-items:center;padding:0 .3rem}.NgxEditor__Dropdown .NgxEditor__Dropdown__Text::after{display:inline-block;content:\"\";margin-left:1.5rem;vertical-align:.25rem;border-top:.25rem solid;border-right:.25rem solid transparent;border-bottom:0;border-left:.25rem solid transparent}.NgxEditor__Dropdown .NgxEditor__Dropdown__DropdownMenu{position:absolute;left:0;top:calc(1.85rem + 2px);box-shadow:rgba(60,64,67,.15) 0 2px 6px 2px;border-radius:4px;background-color:#fff;display:none;z-index:10;width:100%}.NgxEditor__Dropdown .NgxEditor__Dropdown__Item{padding:.5rem;white-space:nowrap;color:inherit}.NgxEditor__Dropdown .NgxEditor__Dropdown__Item:hover{background-color:#ececec}.NgxEditor__Dropdown.NgxEditor__Dropdown--Open,.NgxEditor__Dropdown.NgxEditor__Dropdown--Selected{background-color:#e8f0fe}.NgxEditor__Dropdown.NgxEditor__Dropdown--Open .NgxEditor__Dropdown__Text,.NgxEditor__Dropdown.NgxEditor__Dropdown--Selected .NgxEditor__Dropdown__Text{color:#1a73e8}.NgxEditor__Dropdown .NgxEditor__Dropdown--Active{background-color:#f1f1f1}.NgxEditor__Dropdown .NgxEditor__Dropdown--Active:hover{background-color:#e7e7e7}.NgxEditor__Dropdown.NgxEditor__Dropdown--Open .NgxEditor__Dropdown__DropdownMenu{display:block}.NgxEditor__Placeholder{color:#6c757d;opacity:1}.NgxEditor__Content{padding:.5rem;white-space:pre-wrap}.NgxEditor__Content p{margin:0 0 .7rem}.NgxEditor__Content blockquote{padding-left:1rem;border-left:3px solid #ddd;margin-left:0;margin-right:0}.ProseMirror{outline:0}"]
        })
    ], NgxEditorComponent);
    return NgxEditorComponent;
}());
export { NgxEditorComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWVkaXRvci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZWRpdG9yLyIsInNvdXJjZXMiOlsibGliL25neC1lZGl0b3IuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUFFLFNBQVMsRUFDcEIsVUFBVSxFQUFhLGlCQUFpQixFQUN6QyxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsaUJBQWlCLEVBQXdCLE1BQU0sZ0JBQWdCLENBQUM7QUFFekUsT0FBTyxFQUFFLFdBQVcsRUFBZSxNQUFNLG1CQUFtQixDQUFDO0FBQzdELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUc5QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQWNoRjtJQVVFLDRCQUFZLGdCQUFrQztRQUZ0QyxzQkFBaUIsR0FBRyxLQUFLLENBQUM7UUFHaEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUM7SUFDeEMsQ0FBQzsyQkFaVSxrQkFBa0I7SUFjN0IsdUNBQVUsR0FBVixVQUFXLEtBQW9CO1FBQzdCLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDM0IsT0FBTztTQUNSO1FBRUQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRUQsNkNBQWdCLEdBQWhCLFVBQWlCLEVBQU87UUFDdEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVELDhDQUFpQixHQUFqQixjQUE0QixDQUFDO0lBRXJCLHFDQUFRLEdBQWhCLFVBQWlCLFdBQW1CO1FBQ2xDLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDaEIsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVPLElBQUEsMkJBQU0sQ0FBaUI7UUFDL0IsT0FBTyxNQUFNLENBQUMsWUFBWSxD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bWVudFJlZixcbiAgZm9yd2FyZFJlZiwgT25EZXN0cm95LCBWaWV3RW5jYXBzdWxhdGlvbiwgT25Jbml0XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTkdfVkFMVUVfQUNDRVNTT1IsIENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBFZGl0b3JTdGF0ZSwgVHJhbnNhY3Rpb24gfSBmcm9tICdwcm9zZW1pcnJvci1zdGF0ZSc7XG5pbXBvcnQgeyBFZGl0b3JWaWV3IH0gZnJvbSAncHJvc2VtaXJyb3Itdmlldyc7XG5pbXBvcnQgeyBOb2RlIGFzIFByb3NlbWlycm9yTm9kZSB9IGZyb20gJ3Byb3NlbWlycm9yLW1vZGVsJztcblxuaW1wb3J0IHsgTmd4RWRpdG9yU2VydmljZSwgTmd4RWRpdG9yU2VydmljZUNvbmZpZyB9IGZyb20gJy4vbmd4LWVkaXRvci5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmd4LWVkaXRvcicsXG4gIHRlbXBsYXRlVXJsOiAnbmd4LWVkaXRvci5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWyduZ3gtZWRpdG9yLmNvbXBvbmVudC5zY3NzJ10sXG4gIHByb3ZpZGVyczogW3tcbiAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBOZ3hFZGl0b3JDb21wb25lbnQpLFxuICAgIG11bHRpOiB0cnVlXG4gIH1dLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXG59KVxuXG5leHBvcnQgY2xhc3MgTmd4RWRpdG9yQ29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgQFZpZXdDaGlsZCgnbmd4RWRpdG9yJywgeyBzdGF0aWM6IHRydWUgfSkgbmd4RWRpdG9yOiBFbGVtZW50UmVmO1xuXG4gIHByaXZhdGUgdmlldzogRWRpdG9yVmlldztcbiAgcHJpdmF0ZSBvbkNoYW5nZTogKHZhbHVlOiBvYmplY3QpID0+IHZvaWQ7XG5cbiAgcHJpdmF0ZSBjb25maWc6IE5neEVkaXRvclNlcnZpY2VDb25maWc7XG5cbiAgcHJpdmF0ZSBlZGl0b3JJbml0aWFsaXplZCA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKG5neEVkaXRvclNlcnZpY2U6IE5neEVkaXRvclNlcnZpY2UpIHtcbiAgICB0aGlzLmNvbmZpZyA9IG5neEVkaXRvclNlcnZpY2UuY29uZmlnO1xuICB9XG5cbiAgd3JpdGVWYWx1ZSh2YWx1ZTogb2JqZWN0IHwgbnVsbCkge1xuICAgIGlmICghdGhpcy5lZGl0b3JJbml0aWFsaXplZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMudXBkYXRlQ29udGVudCh2YWx1ZSk7XG4gIH1cblxuICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLm9uQ2hhbmdlID0gZm47XG4gIH1cblxuICByZWdpc3Rlck9uVG91Y2hlZCgpOiB2b2lkIHsgfVxuXG4gIHByaXZhdGUgcGFyc2VEb2MoY29udGVudEpzb246IG9iamVjdCk6IFByb3NlbWlycm9yTm9kZSB7XG4gICAgaWYgKCFjb250ZW50SnNvbikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgeyBzY2hlbWEgfSA9IHRoaXMuY29uZmlnO1xuICAgIHJldHVybiBzY2hlbWEubm9kZUZyb21KU09OKGNvbnRlbnRKc29uKTtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlQ29udGVudCh2YWx1ZTogb2JqZWN0KSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGRvYyA9IHRoaXMucGFyc2VEb2ModmFsdWUpO1xuICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnZpZXcuc3RhdGU7XG5cbiAgICAgIC8vIGRvbid0IGVtaXQgaWYgYm90aCBjb250ZW50IGlzIHNhbWVcbiAgICAgIGlmIChkb2MgIT09IG51bGwgJiYgc3RhdGUuZG9jLmVxKGRvYykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB0ciA9IHN0YXRlLnRyO1xuICAgICAgdHIucmVwbGFjZVdpdGgoMCwgc3RhdGUuZG9jLmNvbnRlbnQuc2l6ZSwgZG9jKTtcbiAgICAgIHRoaXMudmlldy5kaXNwYXRjaCh0cik7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdVbmFibGUgdG8gdXBkYXRlIGRvY3VtZW50LicsIGVycik7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVUcmFuc2FjdGlvbnModHI6IFRyYW5zYWN0aW9uKSB7XG4gICAgY29uc3QgeyBzdGF0ZSB9ID0gdGhpcy52aWV3LnN0YXRlLmFwcGx5VHJhbnNhY3Rpb24odHIpO1xuXG4gICAgdGhpcy52aWV3LnVwZGF0ZVN0YXRlKHN0YXRlKTtcblxuICAgIGlmICh0ci5kb2NDaGFuZ2VkICYmIHRoaXMub25DaGFuZ2UpIHtcbiAgICAgIGNvbnN0IGpzb24gPSBzdGF0ZS5kb2MudG9KU09OKCk7XG4gICAgICB0aGlzLm9uQ2hhbmdlKGpzb24pO1xuICAgIH1cbiAgfVxuXG4gIGNyZWF0ZUVkaXRvcigpIHtcbiAgICBjb25zdCB7IHNjaGVtYSwgcGx1Z2lucywgbm9kZVZpZXdzIH0gPSB0aGlzLmNvbmZpZztcblxuICAgIHRoaXMudmlldyA9IG5ldyBFZGl0b3JWaWV3KHRoaXMubmd4RWRpdG9yLm5hdGl2ZUVsZW1lbnQsIHtcbiAgICAgIHN0YXRlOiBFZGl0b3JTdGF0ZS5jcmVhdGUoe1xuICAgICAgICBzY2hlbWEsXG4gICAgICAgIHBsdWdpbnNcbiAgICAgIH0pLFxuICAgICAgbm9kZVZpZXdzLFxuICAgICAgZGlzcGF0Y2hUcmFuc2FjdGlvbjogdGhpcy5oYW5kbGVUcmFuc2FjdGlvbnMuYmluZCh0aGlzKSxcbiAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgY2xhc3M6ICdOZ3hFZGl0b3JfX0NvbnRlbnQnXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgdGhpcy5lZGl0b3JJbml0aWFsaXplZCA9IHRydWU7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmNyZWF0ZUVkaXRvcigpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy52aWV3LmRlc3Ryb3koKTtcbiAgfVxufVxuIl19