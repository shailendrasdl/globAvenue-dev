import { __decorate, __param } from "tslib";
import { Injectable, Optional } from '@angular/core';
import menu from './prosemirror/plugins/menu';
import placeholder from './prosemirror/plugins/placeholder';
import { schema } from './schema';
import * as i0 from "@angular/core";
var NgxEditorServiceConfig = /** @class */ (function () {
    function NgxEditorServiceConfig() {
        this.plugins = [
            menu(),
            placeholder()
        ];
        this.nodeViews = {};
        this.schema = schema;
    }
    NgxEditorServiceConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgxEditorServiceConfig_Factory() { return new NgxEditorServiceConfig(); }, token: NgxEditorServiceConfig, providedIn: "root" });
    NgxEditorServiceConfig = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], NgxEditorServiceConfig);
    return NgxEditorServiceConfig;
}());
export { NgxEditorServiceConfig };
var NgxEditorService = /** @class */ (function () {
    function NgxEditorService(config) {
        this.config = config;
    }
    NgxEditorService.ctorParameters = function () { return [
        { type: NgxEditorServiceConfig, decorators: [{ type: Optional }] }
    ]; };
    NgxEditorService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgxEditorService_Factory() { return new NgxEditorService(i0.ɵɵinject(NgxEditorServiceConfig, 8)); }, token: NgxEditorService, providedIn: "root" });
    NgxEditorService = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __param(0, Optional())
    ], NgxEditorService);
    return NgxEditorService;
}());
export { NgxEditorService };
var defaultConfig = {
    plugins: [],
    nodeViews: {},
    schema: schema
};
export function provideMyServiceOptions(config) {
    return Object.assign({}, defaultConfig, config);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWVkaXRvci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWVkaXRvci8iLCJzb3VyY2VzIjpbImxpYi9uZ3gtZWRpdG9yLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBT3JELE9BQU8sSUFBSSxNQUFNLDRCQUE0QixDQUFDO0FBQzlDLE9BQU8sV0FBVyxNQUFNLG1DQUFtQyxDQUFDO0FBQzVELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUM7O0FBTWxDO0lBQUE7UUFDUyxZQUFPLEdBQWE7WUFDekIsSUFBSSxFQUFFO1lBQ04sV0FBVyxFQUFFO1NBQ2QsQ0FBQztRQUVLLGNBQVMsR0FBYyxFQUFFLENBQUM7UUFDMUIsV0FBTSxHQUFXLE1BQU0sQ0FBQztLQUNoQzs7SUFSWSxzQkFBc0I7UUFKbEMsVUFBVSxDQUFDO1lBQ1YsVUFBVSxFQUFFLE1BQU07U0FDbkIsQ0FBQztPQUVXLHNCQUFzQixDQVFsQztpQ0F2QkQ7Q0F1QkMsQUFSRCxJQVFDO1NBUlksc0JBQXNCO0FBY25DO0lBR0UsMEJBQXdCLE1BQStCO1FBQ3JELElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7O2dCQUZnQyxzQkFBc0IsdUJBQTFDLFFBQVE7OztJQUhWLGdCQUFnQjtRQUo1QixVQUFVLENBQUM7WUFDVixVQUFVLEVBQUUsTUFBTTtTQUNuQixDQUFDO1FBS2EsV0FBQSxRQUFRLEVBQUUsQ0FBQTtPQUhaLGdCQUFnQixDQU01QjsyQkFuQ0Q7Q0FtQ0MsQUFORCxJQU1DO1NBTlksZ0JBQWdCO0FBUTdCLElBQU0sYUFBYSxHQUFvQjtJQUNyQyxPQUFPLEVBQUUsRUFBRTtJQUNYLFNBQVMsRUFBRSxFQUFFO0lBQ2IsTUFBTSxRQUFBO0NBQ1AsQ0FBQztBQUVGLE1BQU0sVUFBVSx1QkFBdUIsQ0FBQyxNQUF3QjtJQUM5RCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLGFBQWEsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgU2NoZW1hIH0gZnJvbSAncHJvc2VtaXJyb3ItbW9kZWwnO1xuaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSAncHJvc2VtaXJyb3Itc3RhdGUnO1xuXG5pbXBvcnQgeyBOZ3hFZGl0b3JDb25maWcsIE5vZGVWaWV3cyB9IGZyb20gJy4vdHlwZXMnO1xuXG5pbXBvcnQgbWVudSBmcm9tICcuL3Byb3NlbWlycm9yL3BsdWdpbnMvbWVudSc7XG5pbXBvcnQgcGxhY2Vob2xkZXIgZnJvbSAnLi9wcm9zZW1pcnJvci9wbHVnaW5zL3BsYWNlaG9sZGVyJztcbmltcG9ydCB7IHNjaGVtYSB9IGZyb20gJy4vc2NoZW1hJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5cbmV4cG9ydCBjbGFzcyBOZ3hFZGl0b3JTZXJ2aWNlQ29uZmlnIHtcbiAgcHVibGljIHBsdWdpbnM6IFBsdWdpbltdID0gW1xuICAgIG1lbnUoKSxcbiAgICBwbGFjZWhvbGRlcigpXG4gIF07XG5cbiAgcHVibGljIG5vZGVWaWV3czogTm9kZVZpZXdzID0ge307XG4gIHB1YmxpYyBzY2hlbWE6IFNjaGVtYSA9IHNjaGVtYTtcbn1cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5cbmV4cG9ydCBjbGFzcyBOZ3hFZGl0b3JTZXJ2aWNlIHtcbiAgY29uZmlnOiBOZ3hFZGl0b3JTZXJ2aWNlQ29uZmlnO1xuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIGNvbmZpZz86IE5neEVkaXRvclNlcnZpY2VDb25maWcpIHtcbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgfVxufVxuXG5jb25zdCBkZWZhdWx0Q29uZmlnOiBOZ3hFZGl0b3JDb25maWcgPSB7XG4gIHBsdWdpbnM6IFtdLFxuICBub2RlVmlld3M6IHt9LFxuICBzY2hlbWFcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlTXlTZXJ2aWNlT3B0aW9ucyhjb25maWc/OiBOZ3hFZGl0b3JDb25maWcpOiBOZ3hFZGl0b3JDb25maWcge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdENvbmZpZywgY29uZmlnKTtcbn1cbiJdfQ==