import { toggleMark } from 'prosemirror-commands';
import { isNodeActive, isMarkActive, isListItem } from '../../helpers';
import { toggleList, toggleBlockType, toggleWrap } from '../../commands';
import { getIconSvg } from '../../../utils/icons';
import flatDeep from '../../../utils/flatDeep';
import menuItemsMeta from './meta';
var SEPERATOR_CLASSNAME = 'NgxEditor__Seperator';
var MENU_ITEM_CLASSNAME = 'NgxEditor__MenuItem';
var ACTIVE_MENU_ITEM_CLASSNAME = MENU_ITEM_CLASSNAME + "--Active";
var DISABLED_CLASSNAME = 'NgxEditor--Disabled';
var DROPDWON_ITEM_CLASSNAME = 'NgxEditor__Dropdown';
var DROPWDOWN_OPEN_CLASSNAME = DROPDWON_ITEM_CLASSNAME + "--Open";
var ACTIVE_DROPDOWN_ITEM_CLASSNAME = DROPDWON_ITEM_CLASSNAME + "--Active";
var SELECTED_DROPDOWN_ITEM_CLASSNAME = DROPDWON_ITEM_CLASSNAME + "--Selected";
var DROPDOWN_ITEMS = new Map();
DROPDOWN_ITEMS.set('heading', ['h1', 'h2', 'h3', 'h4', 'h5', 'h6']);
var DropDownView = /** @class */ (function () {
    function DropDownView(dropdownGroup, dropdownFields, editorView, options) {
        this.updates = [];
        this.dropdownGroup = dropdownGroup;
        this.dropdownFields = dropdownFields;
        this.editorView = editorView;
        this.options = options;
    }
    DropDownView.prototype.getWrapperDom = function () {
        var _this = this;
        var isDropdownOpen = false;
        var dropdown = document.createElement('div');
        var labels = this.options.labels;
        dropdown.classList.add(DROPDWON_ITEM_CLASSNAME);
        var dropdownText = document.createElement('div');
        dropdownText.classList.add(DROPDWON_ITEM_CLASSNAME + "__Text");
        dropdownText.textContent = labels[this.dropdownGroup];
        dropdown.appendChild(dropdownText);
        // create dropdown list
        var dropdownMenu = document.createElement('div');
        dropdownMenu.classList.add(DROPDWON_ITEM_CLASSNAME + "__DropdownMenu");
        var mouseDownHandler = function (e) {
            e.preventDefault();
            if (!dropdown.contains(e.target)) {
                closeDropdown();
            }
        };
        var openDropdown = function (e) {
            var target = e.target;
            if (dropdownMenu.contains(target)) {
                return;
            }
            dropdown.classList.add(DROPWDOWN_OPEN_CLASSNAME);
            isDropdownOpen = true;
            window.addEventListener('mousedown', mouseDownHandler);
        };
        var closeDropdown = function () {
            dropdown.classList.remove(DROPWDOWN_OPEN_CLASSNAME);
            isDropdownOpen = false;
            window.removeEventListener('mousedown', mouseDownHandler);
        };
        dropdown.addEventListener('click', function (e) {
            e.preventDefault();
            if (!isDropdownOpen) {
                openDropdown(e);
            }
            else {
                closeDropdown();
            }
        });
        this.dropdownFields.forEach(function (dropdownItem) {
            var menuItem = menuItemsMeta[dropdownItem];
            var text = labels[menuItem.key];
            if (menuItem.key === 'heading') {
                text += " " + menuItem.attrs.level;
            }
            var spec = {
                classNames: [
                    DROPDWON_ITEM_CLASSNAME + "__Item"
                ],
                textContent: text,
                attrs: {
                    title: text
                },
                activeClass: ACTIVE_DROPDOWN_ITEM_CLASSNAME,
                disabledClass: DISABLED_CLASSNAME
            };
            var menuItemView = new MenuItemView(menuItem, _this.editorView, spec);
            var _a = menuItemView.render(), update = _a.update, dom = _a.dom;
            // remove open class once clicked on dropdown value
            dom.addEventListener('click', function (e) {
                e.preventDefault();
                closeDropdown();
            });
            // wrapper to execute when update is called
            var dropUpdate = function (state) {
                update(state);
                // update the dropdown content heading when a class is selected
                var activeEl = dropdownMenu.getElementsByClassName(ACTIVE_DROPDOWN_ITEM_CLASSNAME);
                if (activeEl.length) {
                    var el = activeEl[0];
                    dropdownText.textContent = el.textContent;
                    dropdown.classList.add(SELECTED_DROPDOWN_ITEM_CLASSNAME);
                }
                else {
                    // restore default value
                    dropdownText.textContent = labels[_this.dropdownGroup];
                    dropdown.classList.remove(SELECTED_DROPDOWN_ITEM_CLASSNAME);
                }
            };
            dropdownMenu.appendChild(dom);
            _this.updates.push(dropUpdate);
        });
        dropdown.appendChild(dropdownMenu);
        return dropdown;
    };
    DropDownView.prototype.render = function () {
        this.dom = this.getWrapperDom();
        return {
            dom: this.dom,
            updates: this.updates
        };
    };
    return DropDownView;
}());
var MenuItemView = /** @class */ (function () {
    function MenuItemView(menuItem, editorView, spec) {
        this.menuItem = menuItem;
        this.editorView = editorView;
        this.spec = spec;
    }
    MenuItemView.prototype.render = function () {
        var _this = this;
        var dom = this.dom = this.getDom();
        var schema = this.editorView.state.schema;
        var command = this.setupCommandListeners().command;
        var _a = this.spec, activeClass = _a.activeClass, disabledClass = _a.disabledClass;
        var update = function (state) {
            var menuItem = _this.menuItem;
            var isActive = false;
            var canExecute = command(_this.editorView.state, null);
            if (menuItem.type === 'mark') {
                var type = schema.marks[menuItem.key];
                isActive = isMarkActive(state, type);
            }
            if (menuItem.type === 'node') {
                var type = schema.nodes[menuItem.key];
                isActive = isNodeActive(state, type, menuItem.attrs);
            }
            dom.classList.toggle(activeClass, isActive);
            dom.classList.toggle(disabledClass, !canExecute);
        };
        return {
            dom: dom,
            update: update
        };
    };
    MenuItemView.prototype.getDom = function () {
        var div = document.createElement('div');
        if (this.spec.classNames) {
            this.spec.classNames.forEach(function (className) {
                div.classList.add(className);
            });
        }
        if (this.spec.attrs) {
            Object.entries(this.spec.attrs).forEach(function (obj) {
                div.setAttribute(obj[0], obj[1]);
            });
        }
        if (this.spec.innerHTML) {
            div.innerHTML = this.spec.innerHTML;
        }
        if (this.spec.textContent) {
            div.innerHTML = this.spec.textContent;
        }
        return div;
    };
    MenuItemView.prototype.setupCommandListeners = function () {
        var _this = this;
        var schema = this.editorView.state.schema;
        var command;
        if (this.menuItem.type === 'mark') {
            command = toggleMark(schema.marks[this.menuItem.key]);
        }
        if (this.menuItem.type === 'node') {
            var type = schema.nodes[this.menuItem.key];
            if (isListItem(type, schema)) {
                command = toggleList(type, schema.nodes.list_item);
            }
            if (type === schema.nodes.heading) {
                command = toggleBlockType(type, schema.nodes.paragraph, { level: this.menuItem.attrs.level });
            }
            if (type === schema.nodes.blockquote) {
                command = toggleWrap(type);
            }
        }
        this.dom.addEventListener('mousedown', function (e) {
            e.preventDefault();
            // don't execute if not left click
            if (e.buttons !== 1) {
                return;
            }
            // execute command
            command(_this.editorView.state, _this.editorView.dispatch);
        });
        return { command: command };
    };
    return MenuItemView;
}());
var getSeperatorDom = function () {
    var div = document.createElement('div');
    div.className = SEPERATOR_CLASSNAME;
    return div;
};
var Éµ0 = getSeperatorDom;
export var renderMenu = function (options, editorView, menuDom) {
    var updates = [];
    var toolbar = options.toolbar;
    toolbar.forEach(function (group, toolbarIndex) {
        var isLastMenuGroup = toolbar.length - 1 === toolbarIndex;
        group.forEach(function (toolbarItem, menuIndex) {
            var isLastMenuItem = group.length - 1 === menuIndex;
            // render dropdown
            if (typeof toolbarItem === 'object') {
                Object.keys(toolbarItem).forEach(function (dropdownGroup) {
                    if (DROPDOWN_ITEMS.has(dropdownGroup)) {
                        var dropdown = toolbarItem[dropdownGroup];
                        var dropdownView = new DropDownView(dropdownGroup, dropdown, editorView, options);
                        var rendered = dropdownView.render();
                        updates.push(rendered.updates);
                        menuDom.appendChild(rendered.dom);
                    }
                    else {
                        console.warn('Unkown dropdown group:', dropdownGroup);
                    }
                });
            }
            // render Icons
            if (typeof toolbarItem === 'string') {
                var menuItem = menuItemsMeta[toolbarItem];
                var labels = options.labels;
                if (menuItem) {
                    var spec = {
                        classNames: [
                            MENU_ITEM_CLASSNAME,
                            MENU_ITEM_CLASSNAME + "--Icon",
                        ],
                        innerHTML: getIconSvg(menuItem.icon),
                        attrs: {
                            title: labels[menuItem.i18nKey]
                        },
                        activeClass: ACTIVE_MENU_ITEM_CLASSNAME,
                        disabledClass: DISABLED_CLASSNAME
                    };
                    var menuItemView = new MenuItemView(menuItem, editorView, spec);
                    var _a = menuItemView.render(), update = _a.update, dom = _a.dom;
                    menuDom.appendChild(dom);
                    updates.push(update);
                }
            }
            if (typeof toolbarItem === 'function') {
                var _b = toolbarItem(editorView), dom = _b.dom, update = _b.update;
                menuDom.appendChild(dom);
                updates.push(update);
            }
            if (isLastMenuItem && !isLastMenuGroup) {
                var seperatorDom = getSeperatorDom();
                menuDom.appendChild(seperatorDom);
            }
        });
    });
    var combinedUpdates = flatDeep(updates, Infinity);
    return {
        update: function (state) {
            combinedUpdates.forEach(function (update) {
                update(state);
            });
        }
    };
};
export { Éµ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVudS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvcHJvc2VtaXJyb3IvcGx1Z2lucy9tZW51L21lbnUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBY2xELE9BQU8sRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2RSxPQUFPLEVBQUUsVUFBVSxFQUFFLGVBQWUsRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV6RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxRQUFRLE1BQU0seUJBQXlCLENBQUM7QUFFL0MsT0FBTyxhQUErQixNQUFNLFFBQVEsQ0FBQztBQUVyRCxJQUFNLG1CQUFtQixHQUFHLHNCQUFzQixDQUFDO0FBRW5ELElBQU0sbUJBQW1CLEdBQUcscUJBQXFCLENBQUM7QUFDbEQsSUFBTSwwQkFBMEIsR0FBTSxtQkFBbUIsYUFBVSxDQUFDO0FBQ3BFLElBQU0sa0JBQWtCLEdBQUcscUJBQXFCLENBQUM7QUFFakQsSUFBTSx1QkFBdUIsR0FBRyxxQkFBcUIsQ0FBQztBQUN0RCxJQUFNLHdCQUF3QixHQUFNLHVCQUF1QixXQUFRLENBQUM7QUFDcEUsSUFBTSw4QkFBOEIsR0FBTSx1QkFBdUIsYUFBVSxDQUFDO0FBQzVFLElBQU0sZ0NBQWdDLEdBQU0sdUJBQXVCLGVBQVksQ0FBQztBQUVoRixJQUFNLGNBQWMsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0FBQ2pDLGNBQWMsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBR3BFO0lBVUUsc0JBQ0UsYUFBdUMsRUFDdkMsY0FBMEMsRUFD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SUFFcEQsT0FBTztRQUNMLE1BQU0sRUFBTixVQUFPLEtBQWtCO1lBQ3ZCLGVBQWUsQ0FBQyxPQUFPLENBQUMsVUFBQyxNQUFvQztnQkFDM0QsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2hCLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztLQUNGLENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0b2dnbGVNYXJrIH0gZnJvbSAncHJvc2VtaXJyb3ItY29tbWFuZHMnO1xuaW1wb3J0IHsgRWRpdG9yVmlldyB9IGZyb20gJ3Byb3NlbWlycm9yLXZpZXcnO1xuaW1wb3J0IHsgRWRpdG9yU3RhdGUgfSBmcm9tICdwcm9zZW1pcnJvci1zdGF0ZSc7XG5pbXBvcnQgeyBNYXJrVHlwZSwgTm9kZVR5cGUgfSBmcm9tICdwcm9zZW1pcnJvci1tb2RlbCc7XG5cbmltcG9ydCB7XG4gIE1lbnVJdGVtVmlld1NwZWMsXG4gIFRvb2xiYXJJdGVtLFxuICBUb29sYmFyRHJvcGRvd25Hcm91cEtleXMsXG4gIFRvb2xiYXJEcm9wZG93bkdyb3VwVmFsdWVzLFxuICBNZW51T3B0aW9ucyxcbiAgQ29tbWFuZFxufSBmcm9tICcuLi8uLi8uLi90eXBlcyc7XG5cbmltcG9ydCB7IGlzTm9kZUFjdGl2ZSwgaXNNYXJrQWN0aXZlLCBpc0xpc3RJdGVtIH0gZnJvbSAnLi4vLi4vaGVscGVycyc7XG5pbXBvcnQgeyB0b2dnbGVMaXN0LCB0b2dnbGVCbG9ja1R5cGUsIHRvZ2dsZVdyYXAgfSBmcm9tICcuLi8uLi9jb21tYW5kcyc7XG5cbmltcG9ydCB7IGdldEljb25TdmcgfSBmcm9tICcuLi8uLi8uLi91dGlscy9pY29ucyc7XG5pbXBvcnQgZmxhdERlZXAgZnJvbSAnLi4vLi4vLi4vdXRpbHMvZmxhdERlZXAnO1xuXG5pbXBvcnQgbWVudUl0ZW1zTWV0YSwgeyBNZW51SXRlbU1ldGEgfSBmcm9tICcuL21ldGEnO1xuXG5jb25zdCBTRVBFUkFUT1JfQ0xBU1NOQU1FID0gJ05neEVkaXRvcl9fU2VwZXJhdG9yJztcblxuY29uc3QgTUVOVV9JVEVNX0NMQVNTTkFNRSA9ICdOZ3hFZGl0b3JfX01lbnVJdGVtJztcbmNvbnN0IEFDVElWRV9NRU5VX0lURU1fQ0xBU1NOQU1FID0gYCR7TUVOVV9JVEVNX0NMQVNTTkFNRX0tLUFjdGl2ZWA7XG5jb25zdCBESVNBQkxFRF9DTEFTU05BTUUgPSAnTmd4RWRpdG9yLS1EaXNhYmxlZCc7XG5cbmNvbnN0IERST1BEV09OX0lURU1fQ0xBU1NOQU1FID0gJ05neEVkaXRvcl9fRHJvcGRvd24nO1xuY29uc3QgRFJPUFdET1dOX09QRU5fQ0xBU1NOQU1FID0gYCR7RFJPUERXT05fSVRFTV9DTEFTU05BTUV9LS1PcGVuYDtcbmNvbnN0IEFDVElWRV9EUk9QRE9XTl9JVEVNX0NMQVNTTkFNRSA9IGAke0RST1BEV09OX0lURU1fQ0xBU1NOQU1FfS0tQWN0aXZlYDtcbmNvbnN0IFNFTEVDVEVEX0RST1BET1dOX0lURU1fQ0xBU1NOQU1FID0gYCR7RFJPUERXT05fSVRFTV9DTEFTU05BTUV9LS1TZWxlY3RlZGA7XG5cbmNvbnN0IERST1BET1dOX0lURU1TID0gbmV3IE1hcCgpO1xuRFJPUERPV05fSVRFTVMuc2V0KCdoZWFkaW5nJywgWydoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNiddKTtcblxuXG5jbGFzcyBEcm9wRG93blZpZXcge1xuICBwcml2YXRlIGRyb3Bkb3duR3JvdXA6IFRvb2xiYXJEcm9wZG93bkdyb3VwS2V5cztcbiAgcHJpdmF0ZSBkcm9wZG93bkZpZWxkczogVG9vbGJhckRyb3Bkb3duR3JvdXBWYWx1ZXM7XG4gIHByaXZhdGUgZWRpdG9yVmlldzogRWRpdG9yVmlldztcbiAgcHJpdmF0ZSBvcHRpb25zOiBNZW51T3B0aW9ucztcblxuICBkb206IEhUTUxFbGVtZW50O1xuXG4gIHVwZGF0ZXMgPSBbXTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBkcm9wZG93bkdyb3VwOiBUb29sYmFyRHJvcGRvd25Hcm91cEtleXMsXG4gICAgZHJvcGRvd25GaWVsZHM6IFRvb2xiYXJEcm9wZG93bkdyb3VwVmFsdWVzLFxuICAgIGVkaXRvclZpZXc6IEVkaXRvclZpZXcsXG4gICAgb3B0aW9uczogTWVudU9wdGlvbnNcbiAgKSB7XG4gICAgdGhpcy5kcm9wZG93bkdyb3VwID0gZHJvcGRvd25Hcm91cDtcbiAgICB0aGlzLmRyb3Bkb3duRmllbGRzID0gZHJvcGRvd25GaWVsZHM7XG4gICAgdGhpcy5lZGl0b3JWaWV3ID0gZWRpdG9yVmlldztcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG5cbiAgZ2V0V3JhcHBlckRvbSgpOiBIVE1MRWxlbWVudCB7XG4gICAgbGV0IGlzRHJvcGRvd25PcGVuID0gZmFsc2U7XG4gICAgY29uc3QgZHJvcGRvd24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIGNvbnN0IGxhYmVscyA9IHRoaXMub3B0aW9ucy5sYWJlbHM7XG5cbiAgICBkcm9wZG93bi5jbGFzc0xpc3QuYWRkKERST1BEV09OX0lURU1fQ0xBU1NOQU1FKTtcblxuICAgIGNvbnN0IGRyb3Bkb3duVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGRyb3Bkb3duVGV4dC5jbGFzc0xpc3QuYWRkKGAke0RST1BEV09OX0lURU1fQ0xBU1NOQU1FfV9fVGV4dGApO1xuICAgIGRyb3Bkb3duVGV4dC50ZXh0Q29udGVudCA9IGxhYmVsc1t0aGlzLmRyb3Bkb3duR3JvdXBdO1xuXG4gICAgZHJvcGRvd24uYXBwZW5kQ2hpbGQoZHJvcGRvd25UZXh0KTtcblxuICAgIC8vIGNyZWF0ZSBkcm9wZG93biBsaXN0XG4gICAgY29uc3QgZHJvcGRvd25NZW51ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZHJvcGRvd25NZW51LmNsYXNzTGlzdC5hZGQoYCR7RFJPUERXT05fSVRFTV9DTEFTU05BTUV9X19Ecm9wZG93bk1lbnVgKTtcblxuICAgIGNvbnN0IG1vdXNlRG93bkhhbmRsZXIgPSAoZTogTW91c2VFdmVudCkgPT4ge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgaWYgKCFkcm9wZG93bi5jb250YWlucyhlLnRhcmdldCBhcyBOb2RlKSkge1xuICAgICAgICBjbG9zZURyb3Bkb3duKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGNvbnN0IG9wZW5Ecm9wZG93biA9IChlOiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldCBhcyBIVE1MRWxlbWVudDtcblxuICAgICAgaWYgKGRyb3Bkb3duTWVudS5jb250YWlucyh0YXJnZXQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZHJvcGRvd24uY2xhc3NMaXN0LmFkZChEUk9QV0RPV05fT1BFTl9DTEFTU05BTUUpO1xuICAgICAgaXNEcm9wZG93bk9wZW4gPSB0cnVlO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIG1vdXNlRG93bkhhbmRsZXIpO1xuICAgIH07XG5cbiAgICBjb25zdCBjbG9zZURyb3Bkb3duID0gKCkgPT4ge1xuICAgICAgZHJvcGRvd24uY2xhc3NMaXN0LnJlbW92ZShEUk9QV0RPV05fT1BFTl9DTEFTU05BTUUpO1xuICAgICAgaXNEcm9wZG93bk9wZW4gPSBmYWxzZTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBtb3VzZURvd25IYW5kbGVyKTtcbiAgICB9O1xuXG4gICAgZHJvcGRvd24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZTogTW91c2VFdmVudCkgPT4ge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgaWYgKCFpc0Ryb3Bkb3duT3Blbikge1xuICAgICAgICBvcGVuRHJvcGRvd24oZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjbG9zZURyb3Bkb3duKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLmRyb3Bkb3duRmllbGRzLmZvckVhY2goZHJvcGRvd25JdGVtID0+IHtcbiAgICAgIGNvbnN0IG1lbnVJdGVtID0gbWVudUl0ZW1zTWV0YVtkcm9wZG93bkl0ZW1dO1xuXG4gICAgICBsZXQgdGV4dCA9IGxhYmVsc1ttZW51SXRlbS5rZXldO1xuXG4gICAgICBpZiAobWVudUl0ZW0ua2V5ID09PSAnaGVhZGluZycpIHtcbiAgICAgICAgdGV4dCArPSBgICR7bWVudUl0ZW0uYXR0cnMubGV2ZWx9YDtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgc3BlYzogTWVudUl0ZW1WaWV3U3BlYyA9IHtcbiAgICAgICAgY2xhc3NOYW1lczogW1xuICAgICAgICAgIGAke0RST1BEV09OX0lURU1fQ0xBU1NOQU1FfV9fSXRlbWBcbiAgICAgICAgXSxcbiAgICAgICAgdGV4dENvbnRlbnQ6IHRleHQsXG4gICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgdGl0bGU6IHRleHRcbiAgICAgICAgfSxcbiAgICAgICAgYWN0aXZlQ2xhc3M6IEFDVElWRV9EUk9QRE9XTl9JVEVNX0NMQVNTTkFNRSxcbiAgICAgICAgZGlzYWJsZWRDbGFzczogRElTQUJMRURfQ0xBU1NOQU1FXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBtZW51SXRlbVZpZXcgPSBuZXcgTWVudUl0ZW1WaWV3KG1lbnVJdGVtLCB0aGlzLmVkaXRvclZpZXcsIHNwZWMpO1xuICAgICAgY29uc3QgeyB1cGRhdGUsIGRvbSB9ID0gbWVudUl0ZW1WaWV3LnJlbmRlcigpO1xuXG4gICAgICAvLyByZW1vdmUgb3BlbiBjbGFzcyBvbmNlIGNsaWNrZWQgb24gZHJvcGRvd24gdmFsdWVcbiAgICAgIGRvbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlOiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgY2xvc2VEcm9wZG93bigpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIHdyYXBwZXIgdG8gZXhlY3V0ZSB3aGVuIHVwZGF0ZSBpcyBjYWxsZWRcbiAgICAgIGNvbnN0IGRyb3BVcGRhdGUgPSAoc3RhdGU6IEVkaXRvclN0YXRlKSA9PiB7XG4gICAgICAgIHVwZGF0ZShzdGF0ZSk7XG5cbiAgICAgICAgLy8gdXBkYXRlIHRoZSBkcm9wZG93biBjb250ZW50IGhlYWRpbmcgd2hlbiBhIGNsYXNzIGlzIHNlbGVjdGVkXG4gICAgICAgIGNvbnN0IGFjdGl2ZUVsID0gZHJvcGRvd25NZW51LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoQUNUSVZFX0RST1BET1dOX0lURU1fQ0xBU1NOQU1FKTtcbiAgICAgICAgaWYgKGFjdGl2ZUVsLmxlbmd0aCkge1xuICAgICAgICAgIGNvbnN0IGVsID0gYWN0aXZlRWxbMF07XG4gICAgICAgICAgZHJvcGRvd25UZXh0LnRleHRDb250ZW50ID0gZWwudGV4dENvbnRlbnQ7XG4gICAgICAgICAgZHJvcGRvd24uY2xhc3NMaXN0LmFkZChTRUxFQ1RFRF9EUk9QRE9XTl9JVEVNX0NMQVNTTkFNRSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gcmVzdG9yZSBkZWZhdWx0IHZhbHVlXG4gICAgICAgICAgZHJvcGRvd25UZXh0LnRleHRDb250ZW50ID0gbGFiZWxzW3RoaXMuZHJvcGRvd25Hcm91cF07XG4gICAgICAgICAgZHJvcGRvd24uY2xhc3NMaXN0LnJlbW92ZShTRUxFQ1RFRF9EUk9QRE9XTl9JVEVNX0NMQVNTTkFNRSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGRyb3Bkb3duTWVudS5hcHBlbmRDaGlsZChkb20pO1xuICAgICAgdGhpcy51cGRhdGVzLnB1c2goZHJvcFVwZGF0ZSk7XG4gICAgfSk7XG5cbiAgICBkcm9wZG93bi5hcHBlbmRDaGlsZChkcm9wZG93bk1lbnUpO1xuICAgIHJldHVybiBkcm9wZG93bjtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICB0aGlzLmRvbSA9IHRoaXMuZ2V0V3JhcHBlckRvbSgpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGRvbTogdGhpcy5kb20sXG4gICAgICB1cGRhdGVzOiB0aGlzLnVwZGF0ZXNcbiAgICB9O1xuICB9XG59XG5cbmNsYXNzIE1lbnVJdGVtVmlldyB7XG4gIHByaXZhdGUgbWVudUl0ZW06IE1lbnVJdGVtTWV0YTtcbiAgcHJpdmF0ZSBlZGl0b3JWaWV3OiBFZGl0b3JWaWV3O1xuICBwcml2YXRlIHNwZWM6IE1lbnVJdGVtVmlld1NwZWM7XG5cbiAgZG9tOiBIVE1MRWxlbWVudDtcblxuICBjb25zdHJ1Y3RvcihtZW51SXRlbTogTWVudUl0ZW1NZXRhLCBlZGl0b3JWaWV3OiBFZGl0b3JWaWV3LCBzcGVjOiBNZW51SXRlbVZpZXdTcGVjKSB7XG4gICAgdGhpcy5tZW51SXRlbSA9IG1lbnVJdGVtO1xuICAgIHRoaXMuZWRpdG9yVmlldyA9IGVkaXRvclZpZXc7XG4gICAgdGhpcy5zcGVjID0gc3BlYztcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBkb20gPSB0aGlzLmRvbSA9IHRoaXMuZ2V0RG9tKCk7XG4gICAgY29uc3QgeyBzY2hlbWEgfSA9IHRoaXMuZWRpdG9yVmlldy5zdGF0ZTtcbiAgICBjb25zdCB7IGNvbW1hbmQgfSA9IHRoaXMuc2V0dXBDb21tYW5kTGlzdGVuZXJzKCk7XG5cbiAgICBjb25zdCB7IGFjdGl2ZUNsYXNzLCBkaXNhYmxlZENsYXNzIH0gPSB0aGlzLnNwZWM7XG5cbiAgICBjb25zdCB1cGRhdGUgPSAoc3RhdGU6IEVkaXRvclN0YXRlKTogdm9pZCA9PiB7XG4gICAgICBjb25zdCBtZW51SXRlbSA9IHRoaXMubWVudUl0ZW07XG4gICAgICBsZXQgaXNBY3RpdmUgPSBmYWxzZTtcblxuICAgICAgY29uc3QgY2FuRXhlY3V0ZSA9IGNvbW1hbmQodGhpcy5lZGl0b3JWaWV3LnN0YXRlLCBudWxsKTtcblxuICAgICAgaWYgKG1lbnVJdGVtLnR5cGUgPT09ICdtYXJrJykge1xuICAgICAgICBjb25zdCB0eXBlOiBNYXJrVHlwZSA9IHNjaGVtYS5tYXJrc1ttZW51SXRlbS5rZXldO1xuICAgICAgICBpc0FjdGl2ZSA9IGlzTWFya0FjdGl2ZShzdGF0ZSwgdHlwZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChtZW51SXRlbS50eXBlID09PSAnbm9kZScpIHtcbiAgICAgICAgY29uc3QgdHlwZTogTm9kZVR5cGUgPSBzY2hlbWEubm9kZXNbbWVudUl0ZW0ua2V5XTtcbiAgICAgICAgaXNBY3RpdmUgPSBpc05vZGVBY3RpdmUoc3RhdGUsIHR5cGUsIG1lbnVJdGVtLmF0dHJzKTtcbiAgICAgIH1cblxuICAgICAgZG9tLmNsYXNzTGlzdC50b2dnbGUoYWN0aXZlQ2xhc3MsIGlzQWN0aXZlKTtcbiAgICAgIGRvbS5jbGFzc0xpc3QudG9nZ2xlKGRpc2FibGVkQ2xhc3MsICFjYW5FeGVjdXRlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGRvbSxcbiAgICAgIHVwZGF0ZVxuICAgIH07XG4gIH1cblxuICBnZXREb20oKTogSFRNTEVsZW1lbnQge1xuICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgaWYgKHRoaXMuc3BlYy5jbGFzc05hbWVzKSB7XG4gICAgICB0aGlzLnNwZWMuY2xhc3NOYW1lcy5mb3JFYWNoKGNsYXNzTmFtZSA9PiB7XG4gICAgICAgIGRpdi5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zcGVjLmF0dHJzKSB7XG4gICAgICBPYmplY3QuZW50cmllcyh0aGlzLnNwZWMuYXR0cnMpLmZvckVhY2gob2JqID0+IHtcbiAgICAgICAgZGl2LnNldEF0dHJpYnV0ZShvYmpbMF0sIG9ialsxXSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zcGVjLmlubmVySFRNTCkge1xuICAgICAgZGl2LmlubmVySFRNTCA9IHRoaXMuc3BlYy5pbm5lckhUTUw7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc3BlYy50ZXh0Q29udGVudCkge1xuICAgICAgZGl2LmlubmVySFRNTCA9IHRoaXMuc3BlYy50ZXh0Q29udGVudDtcbiAgICB9XG5cbiAgICByZXR1cm4gZGl2O1xuICB9XG5cbiAgcHJpdmF0ZSBzZXR1cENvbW1hbmRMaXN0ZW5lcnMoKSB7XG4gICAgY29uc3QgeyBzY2hlbWEgfSA9IHRoaXMuZWRpdG9yVmlldy5zdGF0ZTtcblxuICAgIGxldCBjb21tYW5kOiBDb21tYW5kO1xuXG4gICAgaWYgKHRoaXMubWVudUl0ZW0udHlwZSA9PT0gJ21hcmsnKSB7XG4gICAgICBjb21tYW5kID0gdG9nZ2xlTWFyayhzY2hlbWEubWFya3NbdGhpcy5tZW51SXRlbS5rZXldKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5tZW51SXRlbS50eXBlID09PSAnbm9kZScpIHtcbiAgICAgIGNvbnN0IHR5cGUgPSBzY2hlbWEubm9kZXNbdGhpcy5tZW51SXRlbS5rZXldO1xuXG4gICAgICBpZiAoaXNMaXN0SXRlbSh0eXBlLCBzY2hlbWEpKSB7XG4gICAgICAgIGNvbW1hbmQgPSB0b2dnbGVMaXN0KHR5cGUsIHNjaGVtYS5ub2Rlcy5saXN0X2l0ZW0pO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZSA9PT0gc2NoZW1hLm5vZGVzLmhlYWRpbmcpIHtcbiAgICAgICAgY29tbWFuZCA9IHRvZ2dsZUJsb2NrVHlwZSh0eXBlLCBzY2hlbWEubm9kZXMucGFyYWdyYXBoLCB7IGxldmVsOiB0aGlzLm1lbnVJdGVtLmF0dHJzLmxldmVsIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZSA9PT0gc2NoZW1hLm5vZGVzLmJsb2NrcXVvdGUpIHtcbiAgICAgICAgY29tbWFuZCA9IHRvZ2dsZVdyYXAodHlwZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5kb20uYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgKGU6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgLy8gZG9uJ3QgZXhlY3V0ZSBpZiBub3QgbGVmdCBjbGlja1xuICAgICAgaWYgKGUuYnV0dG9ucyAhPT0gMSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIGV4ZWN1dGUgY29tbWFuZFxuICAgICAgY29tbWFuZCh0aGlzLmVkaXRvclZpZXcuc3RhdGUsIHRoaXMuZWRpdG9yVmlldy5kaXNwYXRjaCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4geyBjb21tYW5kIH07XG4gIH1cbn1cblxuY29uc3QgZ2V0U2VwZXJhdG9yRG9tID0gKCk6IEhUTUxFbGVtZW50ID0+IHtcbiAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGRpdi5jbGFzc05hbWUgPSBTRVBFUkFUT1JfQ0xBU1NOQU1FO1xuICByZXR1cm4gZGl2O1xufTtcblxuZXhwb3J0IGNvbnN0IHJlbmRlck1lbnUgPSAob3B0aW9uczogTWVudU9wdGlvbnMsIGVkaXRvclZpZXc6IEVkaXRvclZpZXcsIG1lbnVEb206IEhUTUxFbGVtZW50KSA9PiB7XG4gIGNvbnN0IHVwZGF0ZXM6IGFueVtdID0gW107XG5cbiAgY29uc3QgdG9vbGJhciA9IG9wdGlvbnMudG9vbGJhcjtcblxuICB0b29sYmFyLmZvckVhY2goKGdyb3VwOiBUb29sYmFySXRlbVtdLCB0b29sYmFySW5kZXg6IG51bWJlcik6IHZvaWQgPT4ge1xuICAgIGNvbnN0IGlzTGFzdE1lbnVHcm91cCA9IHRvb2xiYXIubGVuZ3RoIC0gMSA9PT0gdG9vbGJhckluZGV4O1xuXG4gICAgZ3JvdXAuZm9yRWFjaCgodG9vbGJhckl0ZW06IFRvb2xiYXJJdGVtLCBtZW51SW5kZXg6IG51bWJlcik6IHZvaWQgPT4ge1xuICAgICAgY29uc3QgaXNMYXN0TWVudUl0ZW0gPSBncm91cC5sZW5ndGggLSAxID09PSBtZW51SW5kZXg7XG5cbiAgICAgIC8vIHJlbmRlciBkcm9wZG93blxuICAgICAgaWYgKHR5cGVvZiB0b29sYmFySXRlbSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgT2JqZWN0LmtleXModG9vbGJhckl0ZW0pLmZvckVhY2goKGRyb3Bkb3duR3JvdXA6IFRvb2xiYXJEcm9wZG93bkdyb3VwS2V5cykgPT4ge1xuICAgICAgICAgIGlmIChEUk9QRE9XTl9JVEVNUy5oYXMoZHJvcGRvd25Hcm91cCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGRyb3Bkb3duOiBUb29sYmFyRHJvcGRvd25Hcm91cFZhbHVlcyA9IHRvb2xiYXJJdGVtW2Ryb3Bkb3duR3JvdXBdO1xuXG4gICAgICAgICAgICBjb25zdCBkcm9wZG93blZpZXcgPSBuZXcgRHJvcERvd25WaWV3KGRyb3Bkb3duR3JvdXAsIGRyb3Bkb3duLCBlZGl0b3JWaWV3LCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IHJlbmRlcmVkID0gZHJvcGRvd25WaWV3LnJlbmRlcigpO1xuICAgICAgICAgICAgdXBkYXRlcy5wdXNoKHJlbmRlcmVkLnVwZGF0ZXMpO1xuICAgICAgICAgICAgbWVudURvbS5hcHBlbmRDaGlsZChyZW5kZXJlZC5kb20pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ1Vua293biBkcm9wZG93biBncm91cDonLCBkcm9wZG93bkdyb3VwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyByZW5kZXIgSWNvbnNcbiAgICAgIGlmICh0eXBlb2YgdG9vbGJhckl0ZW0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbnN0IG1lbnVJdGVtID0gbWVudUl0ZW1zTWV0YVt0b29sYmFySXRlbV07XG5cbiAgICAgICAgY29uc3QgbGFiZWxzID0gb3B0aW9ucy5sYWJlbHM7XG5cbiAgICAgICAgaWYgKG1lbnVJdGVtKSB7XG4gICAgICAgICAgY29uc3Qgc3BlYzogTWVudUl0ZW1WaWV3U3BlYyA9IHtcbiAgICAgICAgICAgIGNsYXNzTmFtZXM6IFtcbiAgICAgICAgICAgICAgTUVOVV9JVEVNX0NMQVNTTkFNRSxcbiAgICAgICAgICAgICAgYCR7TUVOVV9JVEVNX0NMQVNTTkFNRX0tLUljb25gLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGlubmVySFRNTDogZ2V0SWNvblN2ZyhtZW51SXRlbS5pY29uKSxcbiAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgIHRpdGxlOiBsYWJlbHNbbWVudUl0ZW0uaTE4bktleV1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhY3RpdmVDbGFzczogQUNUSVZFX01FTlVfSVRFTV9DTEFTU05BTUUsXG4gICAgICAgICAgICBkaXNhYmxlZENsYXNzOiBESVNBQkxFRF9DTEFTU05BTUVcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgY29uc3QgbWVudUl0ZW1WaWV3ID0gbmV3IE1lbnVJdGVtVmlldyhtZW51SXRlbSwgZWRpdG9yVmlldywgc3BlYyk7XG4gICAgICAgICAgY29uc3QgeyB1cGRhdGUsIGRvbSB9ID0gbWVudUl0ZW1WaWV3LnJlbmRlcigpO1xuXG4gICAgICAgICAgbWVudURvbS5hcHBlbmRDaGlsZChkb20pO1xuICAgICAgICAgIHVwZGF0ZXMucHVzaCh1cGRhdGUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgdG9vbGJhckl0ZW0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY29uc3QgeyBkb20sIHVwZGF0ZSB9ID0gdG9vbGJhckl0ZW0oZWRpdG9yVmlldyk7XG4gICAgICAgIG1lbnVEb20uYXBwZW5kQ2hpbGQoZG9tKTtcbiAgICAgICAgdXBkYXRlcy5wdXNoKHVwZGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0xhc3RNZW51SXRlbSAmJiAhaXNMYXN0TWVudUdyb3VwKSB7XG4gICAgICAgIGNvbnN0IHNlcGVyYXRvckRvbSA9IGdldFNlcGVyYXRvckRvbSgpO1xuICAgICAgICBtZW51RG9tLmFwcGVuZENoaWxkKHNlcGVyYXRvckRvbSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuXG4gIGNvbnN0IGNvbWJpbmVkVXBkYXRlcyA9IGZsYXREZWVwKHVwZGF0ZXMsIEluZmluaXR5KTtcblxuICByZXR1cm4ge1xuICAgIHVwZGF0ZShzdGF0ZTogRWRpdG9yU3RhdGUpIHtcbiAgICAgIGNvbWJpbmVkVXBkYXRlcy5mb3JFYWNoKCh1cGRhdGU6IChzdGF0ZTogRWRpdG9yU3RhdGUpID0+IHZvaWQpID0+IHtcbiAgICAgICAgdXBkYXRlKHN0YXRlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn07XG4iXX0=