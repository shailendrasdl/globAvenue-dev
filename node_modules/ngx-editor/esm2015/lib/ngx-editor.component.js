var NgxEditorComponent_1;
import { __decorate } from "tslib";
import { Component, ViewChild, forwardRef, ViewEncapsulation } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { EditorState } from 'prosemirror-state';
import { EditorView } from 'prosemirror-view';
import { NgxEditorService, NgxEditorServiceConfig } from './ngx-editor.service';
let NgxEditorComponent = NgxEditorComponent_1 = class NgxEditorComponent {
    constructor(ngxEditorService) {
        this.editorInitialized = false;
        this.config = ngxEditorService.config;
    }
    writeValue(value) {
        if (!this.editorInitialized) {
            return;
        }
        this.updateContent(value);
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched() { }
    parseDoc(contentJson) {
        if (!contentJson) {
            return null;
        }
        const { schema } = this.config;
        return schema.nodeFromJSON(contentJson);
    }
    updateContent(value) {
        try {
            const doc = this.parseDoc(value);
            const state = this.view.state;
            // don't emit if both content is same
            if (doc !== null && state.doc.eq(doc)) {
                return;
            }
            const tr = state.tr;
            tr.replaceWith(0, state.doc.content.size, doc);
            this.view.dispatch(tr);
        }
        catch (err) {
            console.error('Unable to update document.', err);
        }
    }
    handleTransactions(tr) {
        const { state } = this.view.state.applyTransaction(tr);
        this.view.updateState(state);
        if (tr.docChanged && this.onChange) {
            const json = state.doc.toJSON();
            this.onChange(json);
        }
    }
    createEditor() {
        const { schema, plugins, nodeViews } = this.config;
        this.view = new EditorView(this.ngxEditor.nativeElement, {
            state: EditorState.create({
                schema,
                plugins
            }),
            nodeViews,
            dispatchTransaction: this.handleTransactions.bind(this),
            attributes: {
                class: 'NgxEditor__Content'
            },
        });
        this.editorInitialized = true;
    }
    ngOnInit() {
        this.createEditor();
    }
    ngOnDestroy() {
        this.view.destroy();
    }
};
NgxEditorComponent.ctorParameters = () => [
    { type: NgxEditorService }
];
__decorate([
    ViewChild('ngxEditor', { static: true })
], NgxEditorComponent.prototype, "ngxEditor", void 0);
NgxEditorComponent = NgxEditorComponent_1 = __decorate([
    Component({
        selector: 'ngx-editor',
        template: "<div class=\"NgxEditor\" #ngxEditor></div>\n",
        providers: [{
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => NgxEditorComponent_1),
                multi: true
            }],
        encapsulation: ViewEncapsulation.None,
        styles: [".NgxEditor{background:padding-box #fff;color:#000;border-radius:4px;border:2px solid rgba(0,0,0,.2)}.NgxEditor__MenuBar{display:flex;padding:.2rem;border-bottom:1px solid #ddd;cursor:default;height:1.85rem}.NgxEditor__MenuItem{border-radius:2px;display:flex;align-items:center;justify-content:center}.NgxEditor__MenuItem:hover{background-color:#f1f1f1}.NgxEditor__MenuItem.NgxEditor__MenuItem--Icon{height:1.85rem;width:1.85rem;transition:.3s ease-in-out;margin-right:2px}.NgxEditor__MenuItem.NgxEditor__MenuItem--Text{padding:0 .3rem}.NgxEditor__MenuItem.NgxEditor__MenuItem--Active{background-color:#e8f0fe;color:#1a73e8}.NgxEditor__MenuItem.NgxEditor__MenuItem--Active svg{fill:#1a73e8}.NgxEditor--Disabled{opacity:.5;pointer-events:none}.NgxEditor__Seperator{border-left:1px solid #ccc;margin:0 .3rem}.NgxEditor__Dropdown{min-width:4rem;position:relative;display:flex;align-items:center}.NgxEditor__Dropdown:hover{background-color:#f1f1f1}.NgxEditor__Dropdown .NgxEditor__Dropdown__Text{display:flex;align-items:center;padding:0 .3rem}.NgxEditor__Dropdown .NgxEditor__Dropdown__Text::after{display:inline-block;content:\"\";margin-left:1.5rem;vertical-align:.25rem;border-top:.25rem solid;border-right:.25rem solid transparent;border-bottom:0;border-left:.25rem solid transparent}.NgxEditor__Dropdown .NgxEditor__Dropdown__DropdownMenu{position:absolute;left:0;top:calc(1.85rem + 2px);box-shadow:rgba(60,64,67,.15) 0 2px 6px 2px;border-radius:4px;background-color:#fff;display:none;z-index:10;width:100%}.NgxEditor__Dropdown .NgxEditor__Dropdown__Item{padding:.5rem;white-space:nowrap;color:inherit}.NgxEditor__Dropdown .NgxEditor__Dropdown__Item:hover{background-color:#ececec}.NgxEditor__Dropdown.NgxEditor__Dropdown--Open,.NgxEditor__Dropdown.NgxEditor__Dropdown--Selected{background-color:#e8f0fe}.NgxEditor__Dropdown.NgxEditor__Dropdown--Open .NgxEditor__Dropdown__Text,.NgxEditor__Dropdown.NgxEditor__Dropdown--Selected .NgxEditor__Dropdown__Text{color:#1a73e8}.NgxEditor__Dropdown .NgxEditor__Dropdown--Active{background-color:#f1f1f1}.NgxEditor__Dropdown .NgxEditor__Dropdown--Active:hover{background-color:#e7e7e7}.NgxEditor__Dropdown.NgxEditor__Dropdown--Open .NgxEditor__Dropdown__DropdownMenu{display:block}.NgxEditor__Placeholder{color:#6c757d;opacity:1}.NgxEditor__Content{padding:.5rem;white-space:pre-wrap}.NgxEditor__Content p{margin:0 0 .7rem}.NgxEditor__Content blockquote{padding-left:1rem;border-left:3px solid #ddd;margin-left:0;margin-right:0}.ProseMirror{outline:0}"]
    })
], NgxEditorComponent);
export { NgxEditorComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWVkaXRvci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZWRpdG9yLyIsInNvdXJjZXMiOlsibGliL25neC1lZGl0b3IuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFBRSxTQUFTLEVBQ3BCLFVBQVUsRUFBYSxpQkFBaUIsRUFDekMsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGlCQUFpQixFQUF3QixNQUFNLGdCQUFnQixDQUFDO0FBRXpFLE9BQU8sRUFBRSxXQUFXLEVBQWUsTUFBTSxtQkFBbUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFHOUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLHNCQUFzQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFjaEYsSUFBYSxrQkFBa0IsMEJBQS9CLE1BQWEsa0JBQWtCO0lBVTdCLFlBQVksZ0JBQWtDO1FBRnRDLHNCQUFpQixHQUFHLEtBQUssQ0FBQztRQUdoQyxJQUFJLENBQUMsTUFBTSxHQUFHLGdCQUFnQixDQUFDLE1BQU0sQ0FBQztJQUN4QyxDQUFDO0lBRUQsVUFBVSxDQUFDLEtBQW9CO1FBQzdCLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDM0IsT0FBTztTQUNSO1FBRUQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRUQsZ0JBQWdCLENBQUMsRUFBTztRQUN0QixJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQsaUJBQWlCLEtBQVcsQ0FBQztJQUVyQixRQUFRLENBQUMsV0FBbUI7UUFDbEMsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNoQixPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDL0IsT0FB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bmVudCwgVmlld0NoaWxkLCBFbGVtZW50UmVmLFxuICBmb3J3YXJkUmVmLCBPbkRlc3Ryb3ksIFZpZXdFbmNhcHN1bGF0aW9uLCBPbkluaXRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOR19WQUxVRV9BQ0NFU1NPUiwgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7IEVkaXRvclN0YXRlLCBUcmFuc2FjdGlvbiB9IGZyb20gJ3Byb3NlbWlycm9yLXN0YXRlJztcbmltcG9ydCB7IEVkaXRvclZpZXcgfSBmcm9tICdwcm9zZW1pcnJvci12aWV3JztcbmltcG9ydCB7IE5vZGUgYXMgUHJvc2VtaXJyb3JOb2RlIH0gZnJvbSAncHJvc2VtaXJyb3ItbW9kZWwnO1xuXG5pbXBvcnQgeyBOZ3hFZGl0b3JTZXJ2aWNlLCBOZ3hFZGl0b3JTZXJ2aWNlQ29uZmlnIH0gZnJvbSAnLi9uZ3gtZWRpdG9yLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ3gtZWRpdG9yJyxcbiAgdGVtcGxhdGVVcmw6ICduZ3gtZWRpdG9yLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJ25neC1lZGl0b3IuY29tcG9uZW50LnNjc3MnXSxcbiAgcHJvdmlkZXJzOiBbe1xuICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IE5neEVkaXRvckNvbXBvbmVudCksXG4gICAgbXVsdGk6IHRydWVcbiAgfV0sXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5cbmV4cG9ydCBjbGFzcyBOZ3hFZGl0b3JDb21wb25lbnQgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciwgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBAVmlld0NoaWxkKCduZ3hFZGl0b3InLCB7IHN0YXRpYzogdHJ1ZSB9KSBuZ3hFZGl0b3I6IEVsZW1lbnRSZWY7XG5cbiAgcHJpdmF0ZSB2aWV3OiBFZGl0b3JWaWV3O1xuICBwcml2YXRlIG9uQ2hhbmdlOiAodmFsdWU6IG9iamVjdCkgPT4gdm9pZDtcblxuICBwcml2YXRlIGNvbmZpZzogTmd4RWRpdG9yU2VydmljZUNvbmZpZztcblxuICBwcml2YXRlIGVkaXRvckluaXRpYWxpemVkID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3Iobmd4RWRpdG9yU2VydmljZTogTmd4RWRpdG9yU2VydmljZSkge1xuICAgIHRoaXMuY29uZmlnID0gbmd4RWRpdG9yU2VydmljZS5jb25maWc7XG4gIH1cblxuICB3cml0ZVZhbHVlKHZhbHVlOiBvYmplY3QgfCBudWxsKSB7XG4gICAgaWYgKCF0aGlzLmVkaXRvckluaXRpYWxpemVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVDb250ZW50KHZhbHVlKTtcbiAgfVxuXG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSk6IHZvaWQge1xuICAgIHRoaXMub25DaGFuZ2UgPSBmbjtcbiAgfVxuXG4gIHJlZ2lzdGVyT25Ub3VjaGVkKCk6IHZvaWQgeyB9XG5cbiAgcHJpdmF0ZSBwYXJzZURvYyhjb250ZW50SnNvbjogb2JqZWN0KTogUHJvc2VtaXJyb3JOb2RlIHtcbiAgICBpZiAoIWNvbnRlbnRKc29uKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCB7IHNjaGVtYSB9ID0gdGhpcy5jb25maWc7XG4gICAgcmV0dXJuIHNjaGVtYS5ub2RlRnJvbUpTT04oY29udGVudEpzb24pO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVDb250ZW50KHZhbHVlOiBvYmplY3QpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgZG9jID0gdGhpcy5wYXJzZURvYyh2YWx1ZSk7XG4gICAgICBjb25zdCBzdGF0ZSA9IHRoaXMudmlldy5zdGF0ZTtcblxuICAgICAgLy8gZG9uJ3QgZW1pdCBpZiBib3RoIGNvbnRlbnQgaXMgc2FtZVxuICAgICAgaWYgKGRvYyAhPT0gbnVsbCAmJiBzdGF0ZS5kb2MuZXEoZG9jKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHRyID0gc3RhdGUudHI7XG4gICAgICB0ci5yZXBsYWNlV2l0aCgwLCBzdGF0ZS5kb2MuY29udGVudC5zaXplLCBkb2MpO1xuICAgICAgdGhpcy52aWV3LmRpc3BhdGNoKHRyKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuYWJsZSB0byB1cGRhdGUgZG9jdW1lbnQuJywgZXJyKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZVRyYW5zYWN0aW9ucyh0cjogVHJhbnNhY3Rpb24pIHtcbiAgICBjb25zdCB7IHN0YXRlIH0gPSB0aGlzLnZpZXcuc3RhdGUuYXBwbHlUcmFuc2FjdGlvbih0cik7XG5cbiAgICB0aGlzLnZpZXcudXBkYXRlU3RhdGUoc3RhdGUpO1xuXG4gICAgaWYgKHRyLmRvY0NoYW5nZWQgJiYgdGhpcy5vbkNoYW5nZSkge1xuICAgICAgY29uc3QganNvbiA9IHN0YXRlLmRvYy50b0pTT04oKTtcbiAgICAgIHRoaXMub25DaGFuZ2UoanNvbik7XG4gICAgfVxuICB9XG5cbiAgY3JlYXRlRWRpdG9yKCkge1xuICAgIGNvbnN0IHsgc2NoZW1hLCBwbHVnaW5zLCBub2RlVmlld3MgfSA9IHRoaXMuY29uZmlnO1xuXG4gICAgdGhpcy52aWV3ID0gbmV3IEVkaXRvclZpZXcodGhpcy5uZ3hFZGl0b3IubmF0aXZlRWxlbWVudCwge1xuICAgICAgc3RhdGU6IEVkaXRvclN0YXRlLmNyZWF0ZSh7XG4gICAgICAgIHNjaGVtYSxcbiAgICAgICAgcGx1Z2luc1xuICAgICAgfSksXG4gICAgICBub2RlVmlld3MsXG4gICAgICBkaXNwYXRjaFRyYW5zYWN0aW9uOiB0aGlzLmhhbmRsZVRyYW5zYWN0aW9ucy5iaW5kKHRoaXMpLFxuICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICBjbGFzczogJ05neEVkaXRvcl9fQ29udGVudCdcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICB0aGlzLmVkaXRvckluaXRpYWxpemVkID0gdHJ1ZTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuY3JlYXRlRWRpdG9yKCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnZpZXcuZGVzdHJveSgpO1xuICB9XG59XG4iXX0=