import { __decorate, __param } from "tslib";
import { Injectable, Optional } from '@angular/core';
import menu from './prosemirror/plugins/menu';
import placeholder from './prosemirror/plugins/placeholder';
import { schema } from './schema';
import * as i0 from "@angular/core";
let NgxEditorServiceConfig = class NgxEditorServiceConfig {
    constructor() {
        this.plugins = [
            menu(),
            placeholder()
        ];
        this.nodeViews = {};
        this.schema = schema;
    }
};
NgxEditorServiceConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgxEditorServiceConfig_Factory() { return new NgxEditorServiceConfig(); }, token: NgxEditorServiceConfig, providedIn: "root" });
NgxEditorServiceConfig = __decorate([
    Injectable({
        providedIn: 'root'
    })
], NgxEditorServiceConfig);
export { NgxEditorServiceConfig };
let NgxEditorService = class NgxEditorService {
    constructor(config) {
        this.config = config;
    }
};
NgxEditorService.ctorParameters = () => [
    { type: NgxEditorServiceConfig, decorators: [{ type: Optional }] }
];
NgxEditorService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgxEditorService_Factory() { return new NgxEditorService(i0.ɵɵinject(NgxEditorServiceConfig, 8)); }, token: NgxEditorService, providedIn: "root" });
NgxEditorService = __decorate([
    Injectable({
        providedIn: 'root'
    }),
    __param(0, Optional())
], NgxEditorService);
export { NgxEditorService };
const defaultConfig = {
    plugins: [],
    nodeViews: {},
    schema
};
export function provideMyServiceOptions(config) {
    return Object.assign({}, defaultConfig, config);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWVkaXRvci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWVkaXRvci8iLCJzb3VyY2VzIjpbImxpYi9uZ3gtZWRpdG9yLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBT3JELE9BQU8sSUFBSSxNQUFNLDRCQUE0QixDQUFDO0FBQzlDLE9BQU8sV0FBVyxNQUFNLG1DQUFtQyxDQUFDO0FBQzVELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUM7O0FBTWxDLElBQWEsc0JBQXNCLEdBQW5DLE1BQWEsc0JBQXNCO0lBQW5DO1FBQ1MsWUFBTyxHQUFhO1lBQ3pCLElBQUksRUFBRTtZQUNOLFdBQVcsRUFBRTtTQUNkLENBQUM7UUFFSyxjQUFTLEdBQWMsRUFBRSxDQUFDO1FBQzFCLFdBQU0sR0FBVyxNQUFNLENBQUM7S0FDaEM7Q0FBQSxDQUFBOztBQVJZLHNCQUFzQjtJQUpsQyxVQUFVLENBQUM7UUFDVixVQUFVLEVBQUUsTUFBTTtLQUNuQixDQUFDO0dBRVcsc0JBQXNCLENBUWxDO1NBUlksc0JBQXNCO0FBY25DLElBQWEsZ0JBQWdCLEdBQTdCLE1BQWEsZ0JBQWdCO0lBRzNCLFlBQXdCLE1BQStCO1FBQ3JELElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7Q0FDRixDQUFBOztZQUhrQyxzQkFBc0IsdUJBQTFDLFFBQVE7OztBQUhWLGdCQUFnQjtJQUo1QixVQUFVLENBQUM7UUFDVixVQUFVLEVBQUUsTUFBTTtLQUNuQixDQUFDO0lBS2EsV0FBQSxRQUFRLEVBQUUsQ0FBQTtHQUhaLGdCQUFnQixDQU01QjtTQU5ZLGdCQUFnQjtBQVE3QixNQUFNLGFBQWEsR0FBb0I7SUFDckMsT0FBTyxFQUFFLEVBQUU7SUFDWCxTQUFTLEVBQUUsRUFBRTtJQUNiLE1BQU07Q0FDUCxDQUFDO0FBRUYsTUFBTSxVQUFVLHVCQUF1QixDQUFDLE1BQXdCO0lBQzlELE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsYUFBYSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBTY2hlbWEgfSBmcm9tICdwcm9zZW1pcnJvci1tb2RlbCc7XG5pbXBvcnQgeyBQbHVnaW4gfSBmcm9tICdwcm9zZW1pcnJvci1zdGF0ZSc7XG5cbmltcG9ydCB7IE5neEVkaXRvckNvbmZpZywgTm9kZVZpZXdzIH0gZnJvbSAnLi90eXBlcyc7XG5cbmltcG9ydCBtZW51IGZyb20gJy4vcHJvc2VtaXJyb3IvcGx1Z2lucy9tZW51JztcbmltcG9ydCBwbGFjZWhvbGRlciBmcm9tICcuL3Byb3NlbWlycm9yL3BsdWdpbnMvcGxhY2Vob2xkZXInO1xuaW1wb3J0IHsgc2NoZW1hIH0gZnJvbSAnLi9zY2hlbWEnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcblxuZXhwb3J0IGNsYXNzIE5neEVkaXRvclNlcnZpY2VDb25maWcge1xuICBwdWJsaWMgcGx1Z2luczogUGx1Z2luW10gPSBbXG4gICAgbWVudSgpLFxuICAgIHBsYWNlaG9sZGVyKClcbiAgXTtcblxuICBwdWJsaWMgbm9kZVZpZXdzOiBOb2RlVmlld3MgPSB7fTtcbiAgcHVibGljIHNjaGVtYTogU2NoZW1hID0gc2NoZW1hO1xufVxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcblxuZXhwb3J0IGNsYXNzIE5neEVkaXRvclNlcnZpY2Uge1xuICBjb25maWc6IE5neEVkaXRvclNlcnZpY2VDb25maWc7XG5cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgY29uZmlnPzogTmd4RWRpdG9yU2VydmljZUNvbmZpZykge1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICB9XG59XG5cbmNvbnN0IGRlZmF1bHRDb25maWc6IE5neEVkaXRvckNvbmZpZyA9IHtcbiAgcGx1Z2luczogW10sXG4gIG5vZGVWaWV3czoge30sXG4gIHNjaGVtYVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVNeVNlcnZpY2VPcHRpb25zKGNvbmZpZz86IE5neEVkaXRvckNvbmZpZyk6IE5neEVkaXRvckNvbmZpZyB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0Q29uZmlnLCBjb25maWcpO1xufVxuIl19