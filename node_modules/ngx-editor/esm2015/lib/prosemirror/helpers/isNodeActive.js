const findNodeType = (type, $from) => {
    for (let i = $from.depth; i > 0; i--) {
        if ($from.node(i).type === type) {
            return $from.node(i).type;
        }
    }
    return null;
};
const ɵ0 = findNodeType;
export const isNodeActive = (state, type, attrs = {}) => {
    const { $from, to } = state.selection;
    const node = findNodeType(type, $from);
    if (!Object.entries(attrs).length || !node) {
        return !!node;
    }
    return to <= $from.end() && $from.parent.hasMarkup(type, attrs);
};
export default isNodeActive;
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNOb2RlQWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWVkaXRvci8iLCJzb3VyY2VzIjpbImxpYi9wcm9zZW1pcnJvci9oZWxwZXJzL2lzTm9kZUFjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxNQUFNLFlBQVksR0FBRyxDQUFDLElBQWMsRUFBRSxLQUFrQixFQUFtQixFQUFFO0lBQzNFLEtBQUssSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3BDLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxFQUFFO1lBQy9CLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7U0FDM0I7S0FDRjtJQUVELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyxDQUFDOztBQUVGLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxDQUFDLEtBQWtCLEVBQUUsSUFBYyxFQUFFLEtBQUssR0FBRyxFQUFFLEVBQVcsRUFBRTtJQUN0RixNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUM7SUFFdEMsTUFBTSxJQUFJLEdBQWEsWUFBWSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztJQUVqRCxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLEVBQUU7UUFDMUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDO0tBQ2Y7SUFFRCxPQUFPLEVBQUUsSUFBSSxLQUFLLENBQUMsR0FBRyxFQUFFLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ2xFLENBQUMsQ0FBQztBQUVGLGVBQWUsWUFBWSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWRpdG9yU3RhdGUgfSBmcm9tICdwcm9zZW1pcnJvci1zdGF0ZSc7XG5pbXBvcnQgeyBOb2RlVHlwZSwgUmVzb2x2ZWRQb3MgfSBmcm9tICdwcm9zZW1pcnJvci1tb2RlbCc7XG5cbmNvbnN0IGZpbmROb2RlVHlwZSA9ICh0eXBlOiBOb2RlVHlwZSwgJGZyb206IFJlc29sdmVkUG9zKTogTm9kZVR5cGUgfCBudWxsID0+IHtcbiAgZm9yIChsZXQgaSA9ICRmcm9tLmRlcHRoOyBpID4gMDsgaS0tKSB7XG4gICAgaWYgKCRmcm9tLm5vZGUoaSkudHlwZSA9PT0gdHlwZSkge1xuICAgICAgcmV0dXJuICRmcm9tLm5vZGUoaSkudHlwZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG5cbmV4cG9ydCBjb25zdCBpc05vZGVBY3RpdmUgPSAoc3RhdGU6IEVkaXRvclN0YXRlLCB0eXBlOiBOb2RlVHlwZSwgYXR0cnMgPSB7fSk6IGJvb2xlYW4gPT4ge1xuICBjb25zdCB7ICRmcm9tLCB0byB9ID0gc3RhdGUuc2VsZWN0aW9uO1xuXG4gIGNvbnN0IG5vZGU6IE5vZGVUeXBlID0gZmluZE5vZGVUeXBlKHR5cGUsICRmcm9tKTtcblxuICBpZiAoIU9iamVjdC5lbnRyaWVzKGF0dHJzKS5sZW5ndGggfHwgIW5vZGUpIHtcbiAgICByZXR1cm4gISFub2RlO1xuICB9XG5cbiAgcmV0dXJuIHRvIDw9ICRmcm9tLmVuZCgpICYmICRmcm9tLnBhcmVudC5oYXNNYXJrdXAodHlwZSwgYXR0cnMpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgaXNOb2RlQWN0aXZlO1xuIl19