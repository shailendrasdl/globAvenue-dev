import { Plugin, EditorState, Transaction } from 'prosemirror-state';
import { Node as ProsemirrorNode, Schema } from 'prosemirror-model';
import { EditorView, Decoration, NodeView } from 'prosemirror-view';
declare type TCR = {
    dom: HTMLElement;
    update: (state: EditorState) => void;
};
export declare type ToolbarDropdown = {
    heading?: string[];
};
export declare type ToolbarCustomMenuItem = (editorView: EditorView) => TCR;
export declare type ToolbarDropdownGroupKeys = keyof ToolbarDropdown;
export declare type ToolbarDropdownGroupValues = ToolbarDropdown[ToolbarDropdownGroupKeys];
export declare type ToolbarItem = string | ToolbarDropdown | ToolbarCustomMenuItem;
export declare type Toolbar = Array<ToolbarItem[]> | null;
export interface MenuItemViewSpec {
    classNames?: string[];
    innerHTML?: string;
    textContent?: string;
    attrs?: {
        [key: string]: string;
    };
    activeClass: string;
    disabledClass: string;
}
export interface NodeViews {
    [name: string]: (node: ProsemirrorNode, view: EditorView, getPos: () => number, decorations: Decoration[]) => NodeView;
}
export interface NgxEditorConfig {
    schema?: Schema;
    plugins?: Plugin[];
    nodeViews?: NodeViews;
}
export declare type MenuLabels = {
    [key: string]: string;
};
export interface MenuOptions {
    toolbar?: Toolbar;
    labels?: MenuLabels;
    schema?: Schema;
}
export declare type Command = (schema: EditorState, dispatch: (tr: Transaction) => void) => boolean;
export {};
