(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('@angular/platform-browser')) :
    typeof define === 'function' && define.amd ? define('ngx-markdown-editor', ['exports', '@angular/core', '@angular/common', '@angular/forms', '@angular/platform-browser'], factory) :
    (global = global || self, factory(global['ngx-markdown-editor'] = {}, global.ng.core, global.ng.common, global.ng.forms, global.ng.platformBrowser));
}(this, (function (exports, core, common, forms, platformBrowser) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var DEFAULT_EDITOR_OPTION = {
        showPreviewPanel: true,
        showBorder: true,
        hideIcons: [],
        usingFontAwesome5: false,
        scrollPastEnd: 0,
        enablePreviewContentClick: false,
        resizable: false
    };
    var MarkdownEditorComponent = /** @class */ (function () {
        function MarkdownEditorComponent(required, maxlength, _ngZone, _renderer2, _domSanitizer) {
            if (required === void 0) { required = false; }
            if (maxlength === void 0) { maxlength = -1; }
            this.required = required;
            this.maxlength = maxlength;
            this._ngZone = _ngZone;
            this._renderer2 = _renderer2;
            this._domSanitizer = _domSanitizer;
            this.hideToolbar = false;
            this.height = "300px";
            this._mode = 'editor';
            this._options = {};
            this.onEditorLoaded = new core.EventEmitter();
            this.onPreviewDomChanged = new core.EventEmitter();
            this.hideIcons = {};
            this.showPreviewPanel = true;
            this.isFullScreen = false;
            this.dragover = false;
            this.isUploading = false;
            this._onChange = function (_) { };
            this._onTouched = function () { };
        }
        MarkdownEditorComponent_1 = MarkdownEditorComponent;
        Object.defineProperty(MarkdownEditorComponent.prototype, "mode", {
            get: function () {
                return this._mode;
            },
            set: function (value) {
                var _this = this;
                this._mode = (!value || ['editor', 'preview'].indexOf(value.toLowerCase()) === -1)
                    ? 'editor'
                    : value;
                setTimeout(function () {
                    if (_this._aceEditorIns && typeof _this._aceEditorIns.resize === 'function') {
                        _this._aceEditorIns.resize();
                    }
                }, 100);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MarkdownEditorComponent.prototype, "options", {
            get: function () {
                return this._options || {};
            },
            set: function (value) {
                var _options = Object.assign(DEFAULT_EDITOR_OPTION, {}, value);
                var _hideIcons = {};
                if (typeof _options.showPreviewPanel === 'boolean') {
                    this.showPreviewPanel = _options.showPreviewPanel;
                }
                if (Array.isArray(_options.hideIcons)) {
                    _options.hideIcons.forEach(function (v) { return _hideIcons[v] = true; });
                }
                this._options = _options;
                this.hideIcons = _hideIcons;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MarkdownEditorComponent.prototype, "markdownValue", {
            //#region Markdown value and html value define
            get: function () {
                return this._markdownValue || '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MarkdownEditorComponent.prototype, "_hasUploadFunction", {
            get: function () {
                return this.upload && this.upload instanceof Function;
            },
            enumerable: true,
            configurable: true
        });
        MarkdownEditorComponent.prototype.ngOnInit = function () {
            var markedRender = new marked.Renderer();
            markedRender.image = this._getRender('image');
            markedRender.code = this._getRender('code');
            markedRender.table = this._getRender('table');
            markedRender.listitem = this._getRender('listitem');
            var markedjsOpt = {
                renderer: markedRender,
                highlight: function (code) { return hljs.highlightAuto(code).value; }
            };
            this._markedJsOpt = Object.assign({}, markedjsOpt, this.options.markedjsOpt);
        };
        MarkdownEditorComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            var editorElement = this.aceEditorContainer.nativeElement;
            var editor = ace.edit(editorElement);
            editor.$blockScrolling = Infinity;
            editor.getSession().setUseWrapMode(true);
            editor.getSession().setMode("ace/mode/markdown");
            editor.setValue(this.markdownValue, 1);
            editor.setOption('scrollPastEnd', this._options.scrollPastEnd || 0);
            editor.on('change', function (e) {
                if (_this._isValueSettedByprogrammatically)
                    return;
                var val = editor.getValue();
                _this._updateMarkdownValue(val, true);
                _this._onChange(_this.markdownValue);
            });
            editor.on('blur', function () { _this._onTouched(); });
            this.onEditorLoaded.next(editor);
            this._aceEditorIns = editor;
        };
        MarkdownEditorComponent.prototype.ngOnDestroy = function () {
            this._aceEditorIns && this._aceEditorIns.destroy();
        };
        MarkdownEditorComponent.prototype.writeValue = function (value) {
            this._updateMarkdownValue(value, false);
        };
        MarkdownEditorComponent.prototype.registerOnChange = function (fn) {
            this._onChange = fn;
        };
        MarkdownEditorComponent.prototype.registerOnTouched = function (fn) {
            this._onTouched = fn;
        };
        MarkdownEditorComponent.prototype.validate = function (c) {
            var result = null;
            if (this.required && this.markdownValue.length === 0) {
                result = { required: true };
            }
            if (this.maxlength > 0 && this.markdownValue.length > this.maxlength) {
                result = { maxlength: true };
            }
            return result;
        };
        MarkdownEditorComponent.prototype.insertContent = function (type, customContent) {
            if (!this._aceEditorIns)
                return;
            var selectedText = this._aceEditorIns.getSelectedText();
            var isSelected = !!selectedText;
            var startSize = 2;
            var initText = '';
            var range = this._aceEditorIns.selection.getRange();
            switch (type) {
                case 'Bold':
                    initText = 'Bold Text';
                    selectedText = "**" + (selectedText || initText) + "**";
                    break;
                case 'Italic':
                    initText = 'Italic Text';
                    selectedText = "*" + (selectedText || initText) + "*";
                    startSize = 1;
                    break;
                case 'Heading':
                    initText = 'Heading';
                    selectedText = "# " + (selectedText || initText);
                    break;
                case 'Refrence':
                    initText = 'Refrence';
                    selectedText = "> " + (selectedText || initText);
                    break;
                case 'Link':
                    selectedText = "[](http://)";
                    startSize = 1;
                    break;
                case 'Image':
                    selectedText = "![](http://)";
                    break;
                case 'Ul':
                    selectedText = "- " + (selectedText || initText);
                    break;
                case 'Ol':
                    selectedText = "1. " + (selectedText || initText);
                    startSize = 3;
                    break;
                case 'Code':
                    initText = 'Source Code';
                    selectedText = "```language\r\n" + (selectedText || initText) + "\r\n```";
                    startSize = 3;
                    break;
                case 'Custom':
                    selectedText = customContent;
                    startSize = 0;
                    break;
            }
            this._aceEditorIns.session.replace(range, selectedText);
            if (!isSelected) {
                range.start.column += startSize;
                range.end.column = range.start.column + initText.length;
                this._aceEditorIns.selection.setRange(range);
            }
            this._aceEditorIns.focus();
        };
        MarkdownEditorComponent.prototype.togglePreview = function () {
            this.showPreviewPanel = !this.showPreviewPanel;
            this.editorResize();
        };
        MarkdownEditorComponent.prototype.previewPanelClick = function (event) {
            if (this.options.enablePreviewContentClick !== true) {
                event.preventDefault();
                event.stopImmediatePropagation();
            }
        };
        MarkdownEditorComponent.prototype.fullScreen = function () {
            this.isFullScreen = !this.isFullScreen;
            this._renderer2.setStyle(document.body, 'overflowY', this.isFullScreen ? 'hidden' : 'auto');
            this.editorResize();
        };
        MarkdownEditorComponent.prototype.mdEditorResize = function (size) {
            this.editorResize();
        };
        MarkdownEditorComponent.prototype.editorResize = function (timeOut) {
            var _this = this;
            if (timeOut === void 0) { timeOut = 100; }
            if (!this._aceEditorIns)
                return;
            if (this._aceEditorResizeTimer)
                clearTimeout(this._aceEditorResizeTimer);
            this._aceEditorResizeTimer = setTimeout(function () {
                _this._aceEditorIns.resize();
                _this._aceEditorIns.focus();
            }, timeOut);
        };
        MarkdownEditorComponent.prototype.onDragover = function (evt) {
            evt.stopImmediatePropagation();
            evt.preventDefault();
            if (!this._hasUploadFunction)
                return;
            this.dragover = true;
        };
        MarkdownEditorComponent.prototype.onDrop = function (evt) {
            var _this = this;
            evt.stopImmediatePropagation();
            evt.preventDefault();
            if (!this._hasUploadFunction || this.isUploading)
                return;
            if (!evt.dataTransfer.files || evt.dataTransfer.files.length === 0) {
                this.dragover = false;
                return;
            }
            this.isUploading = true;
            Promise.resolve()
                .then(function () {
                return _this.upload(evt.dataTransfer.files);
            })
                .then(function (data) {
                var e_1, _a;
                if (Array.isArray(data)) {
                    var msg = [];
                    try {
                        for (var data_1 = __values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
                            var item = data_1_1.value;
                            var tempMsg = "[" + item.name + "](" + item.url + ")";
                            if (item.isImg) {
                                tempMsg = "!" + tempMsg;
                            }
                            msg.push(tempMsg);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    _this.insertContent('Custom', msg.join('\r\n'));
                }
                else {
                    console.warn('Invalid upload result. Please using follow this type `UploadResult`.');
                }
                _this.isUploading = false;
                _this.dragover = false;
            })
                .catch(function (err) {
                console.error(err);
                _this.isUploading = false;
                _this.dragover = false;
            });
        };
        MarkdownEditorComponent.prototype.onDragleave = function (evt) {
            evt.stopImmediatePropagation();
            evt.preventDefault();
            if (!this._hasUploadFunction)
                return;
            this.dragover = false;
        };
        MarkdownEditorComponent.prototype._updateMarkdownValue = function (value, changedByUser) {
            if (changedByUser === void 0) { changedByUser = false; }
            var normalizedValue = typeof value === 'string' ? value : (value || '').toString();
            if (this._markdownValue === normalizedValue)
                return;
            this._markdownValue = normalizedValue;
            this._updateDom();
            if (this._aceEditorIns && !changedByUser) {
                this._isValueSettedByprogrammatically = true;
                this._aceEditorIns.setValue(normalizedValue, 1);
                this._isValueSettedByprogrammatically = false;
            }
        };
        MarkdownEditorComponent.prototype._updateDom = function () {
            var _this = this;
            if (this._convertMarkdownToHtmlTimer)
                clearTimeout(this._convertMarkdownToHtmlTimer);
            this._convertMarkdownToHtmlTimer = setTimeout(function () {
                Promise.resolve(_this.markdownValue)
                    .then(function (mdContent) {
                    return (_this.preRender && _this.preRender instanceof Function) ? _this.preRender(mdContent) : mdContent;
                })
                    .then(function (mdContent) {
                    var html = marked(mdContent || '', _this._markedJsOpt);
                    return (_this.postRender && _this.postRender instanceof Function) ? _this.postRender(html) : html;
                })
                    .then(function (parsedHtml) {
                    _this.previewHtml = _this._domSanitizer.bypassSecurityTrustHtml(parsedHtml);
                    if (_this.previewContainer && _this.previewContainer.nativeElement) {
                        _this._ngZone.runOutsideAngular(function () {
                            _this._renderer2.setProperty(_this.previewContainer.nativeElement, 'innerHTML', parsedHtml);
                            setTimeout(function () { _this.onPreviewDomChanged.next(_this.previewContainer.nativeElement); }, 100);
                        });
                    }
                })
                    .catch(function (err) {
                    console.error(err);
                });
            }, 100);
        };
        MarkdownEditorComponent.prototype._getRender = function (renderType) {
            var customRender = this.options && this.options.customRender && this.options.customRender[renderType];
            if (customRender && typeof customRender === 'function') {
                return customRender;
            }
            else {
                switch (renderType) {
                    case 'image':
                        return function (href, title, text) {
                            var out = "<img style=\"max-width: 100%;\" src=\"" + href + "\" alt=\"" + text + "\"";
                            if (title) {
                                out += " title=\"" + title + "\"";
                            }
                            out += this.options.xhtml ? "/>" : ">";
                            return out;
                        };
                    case 'code':
                        return function (code, language) {
                            var validLang = !!(language && hljs.getLanguage(language));
                            var highlighted = validLang ? hljs.highlight(language, code).value : code;
                            return "<pre style=\"padding: 0; border-radius: 0;\"><code class=\"hljs " + language + "\">" + highlighted + "</code></pre>";
                        };
                    case 'table':
                        return function (header, body) {
                            return "<table class=\"table table-bordered\">\n<thead>\n" + header + "</thead>\n<tbody>\n" + body + "</tbody>\n</table>\n";
                        };
                    case 'listitem':
                        return function (text, task, checked) {
                            if (/^\s*\[[x ]\]\s*/.test(text) || text.startsWith('<input')) {
                                if (text.startsWith('<input')) {
                                    text = text
                                        .replace('<input disabled="" type="checkbox">', '<i class="fa fa-square-o"></i>')
                                        .replace('<input checked="" disabled="" type="checkbox">', '<i class="fa fa-check-square"></i>');
                                }
                                else {
                                    text = text
                                        .replace(/^\s*\[ \]\s*/, '<i class="fa fa-square-o"></i> ')
                                        .replace(/^\s*\[x\]\s*/, '<i class="fa fa-check-square"></i> ');
                                }
                                return "<li>" + text + "</li>";
                            }
                            else {
                                return "<li>" + text + "</li>";
                            }
                        };
                }
            }
        };
        var MarkdownEditorComponent_1;
        MarkdownEditorComponent.ctorParameters = function () { return [
            { type: Boolean, decorators: [{ type: core.Attribute, args: ['required',] }] },
            { type: Number, decorators: [{ type: core.Attribute, args: ['maxlength',] }] },
            { type: core.NgZone },
            { type: core.Renderer2 },
            { type: platformBrowser.DomSanitizer }
        ]; };
        __decorate([
            core.ViewChild('aceEditor', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], MarkdownEditorComponent.prototype, "aceEditorContainer", void 0);
        __decorate([
            core.ViewChild('previewContainer', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], MarkdownEditorComponent.prototype, "previewContainer", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], MarkdownEditorComponent.prototype, "hideToolbar", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], MarkdownEditorComponent.prototype, "height", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Function)
        ], MarkdownEditorComponent.prototype, "preRender", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Function)
        ], MarkdownEditorComponent.prototype, "postRender", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Function)
        ], MarkdownEditorComponent.prototype, "upload", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], MarkdownEditorComponent.prototype, "mode", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], MarkdownEditorComponent.prototype, "options", null);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], MarkdownEditorComponent.prototype, "onEditorLoaded", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], MarkdownEditorComponent.prototype, "onPreviewDomChanged", void 0);
        MarkdownEditorComponent = MarkdownEditorComponent_1 = __decorate([
            core.Component({
                selector: 'md-editor',
                template: "<div class=\"md-editor-container\" [class.font-awesome5]=\"options?.usingFontAwesome5\" [class.fullscreen]=\"isFullScreen\"\r\n  [class.md-editor-resizable]=\"options?.resizable\" [style.height]=\"height\">\r\n  <div class=\"md-layout\">\r\n    <div class=\"tool-bar\" *ngIf=\"!hideToolbar && mode != 'preview'\">\r\n      <div class=\"btn-group\">\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Bold\" (click)=\"insertContent('Bold')\"\r\n          *ngIf=\"!hideIcons.Bold\">\r\n          <i class=\"fa fa-bold\"></i>\r\n        </button>\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Italic\" (click)=\"insertContent('Italic')\"\r\n          *ngIf=\"!hideIcons.Italic\">\r\n          <i class=\"fa fa-italic\"></i>\r\n        </button>\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Heading\" (click)=\"insertContent('Heading')\"\r\n          *ngIf=\"!hideIcons.Heading\">\r\n          <i class=\"fa fa-header\"></i>\r\n        </button>\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Refrence\" (click)=\"insertContent('Refrence')\"\r\n          *ngIf=\"!hideIcons.Refrence\">\r\n          <i class=\"fa fa-quote-left\"></i>\r\n        </button>\r\n      </div>\r\n      <div class=\"btn-group\">\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Link\" (click)=\"insertContent('Link')\"\r\n          *ngIf=\"!hideIcons.Link\">\r\n          <i class=\"fa fa-link\"></i>\r\n        </button>\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Image\" (click)=\"insertContent('Image')\"\r\n          *ngIf=\"!hideIcons.Image\">\r\n          <i class=\"fa fa-image\"></i>\r\n        </button>\r\n      </div>\r\n      <div class=\"btn-group\">\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Unordered List\" (click)=\"insertContent('Ul')\"\r\n          *ngIf=\"!hideIcons.Ul\">\r\n          <i class=\"fa fa-list-ul\"></i>\r\n        </button>\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Ordered List\" (click)=\"insertContent('Ol')\"\r\n          *ngIf=\"!hideIcons.Ol\">\r\n          <i class=\"fa fa-list-ol\"></i>\r\n        </button>\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Code Block\" (click)=\"insertContent('Code')\"\r\n          *ngIf=\"!hideIcons.Code\">\r\n          <i class=\"fa fa-file-code-o\"></i>\r\n        </button>\r\n      </div>\r\n      <div class=\"btn-group\">\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\"\r\n          [attr.title]=\"showPreviewPanel ? 'Hide Preview' : 'Show Preview'\" (click)=\"togglePreview()\"\r\n          *ngIf=\"!hideIcons.TogglePreview\">\r\n          <i class=\"fa\" [class.fa-eye]=\"!showPreviewPanel\" [class.fa-eye-slash]=\"showPreviewPanel\"></i>\r\n        </button>\r\n      </div>\r\n      <div class=\"btn-group pull-right hide-split\">\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" [class.active]=\"isFullScreen\" (click)=\"fullScreen()\"\r\n          *ngIf=\"!hideIcons.FullScreen\">\r\n          <i class=\"fa\" [class.fa-arrows-alt]=\"!options?.usingFontAwesome5 || !isFullScreen\"\r\n            [class.fa-compress]=\"options?.usingFontAwesome5 && isFullScreen\"></i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <div class=\"editor-container\">\r\n      <div [class.dragover]=\"dragover\" [style.display]=\"mode == 'preview' ? 'none' : null\"\r\n        (dragover)=\"onDragover($event)\">\r\n        <div class=\"drag-container\">\r\n          <div class=\"upload-loading\">\r\n            <i class=\"fa fa-upload\" *ngIf=\"!isUploading\"></i>\r\n            <i class=\"fa fa-spinner fa-pulse fa-fw\" *ngIf=\"isUploading\"></i>\r\n            <div class=\"text\">{{ isUploading ? 'Uploading' : 'Drag it here' }}</div>\r\n          </div>\r\n        </div>\r\n        <div class=\"drag-container drag-container-mask\" (drop)=\"onDrop($event)\" (dragleave)=\"onDragleave($event)\"></div>\r\n        <div class=\"editor-panel\">\r\n          <div class=\"ace-editor\" #aceEditor></div>\r\n        </div>\r\n      </div>\r\n      <div class=\"preview-container\" [style.display]=\"(mode == 'preview' || showPreviewPanel) ? 'block' : 'none'\"\r\n        (click)=\"previewPanelClick($event)\">\r\n        <div class=\"preview-panel\" #previewContainer></div>\r\n      </div>\r\n    </div>\r\n    <div class=\"md-footer\" *ngIf=\"maxlength > 0 && mode != 'preview'\">\r\n      <div class=\"text-right length-view\">\r\n        {{ markdownValue?.length }} / {{ maxlength }}\r\n      </div>\r\n      <div class=\"resize-btn\"></div>\r\n    </div>\r\n  </div>\r\n  <md-editor-resize-sensor *ngIf=\"options?.resizable\" (resize)=\"mdEditorResize($event)\"></md-editor-resize-sensor>\r\n</div>\r\n",
                providers: [
                    {
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: core.forwardRef(function () { return MarkdownEditorComponent_1; }),
                        multi: true
                    },
                    {
                        provide: forms.NG_VALIDATORS,
                        useExisting: core.forwardRef(function () { return MarkdownEditorComponent_1; }),
                        multi: true
                    }
                ],
                styles: ["@charset \"UTF-8\";.md-editor-container{position:relative;height:100%;margin-bottom:15px;border:1px solid rgba(0,0,0,.1)}.md-editor-container.fullscreen{margin:0;position:fixed;border:0;top:0;left:0;width:100%!important;height:100%!important;z-index:99999999}.md-editor-container.md-editor-resizable:not(.fullscreen){resize:both;overflow:hidden;display:inline-block;width:100%}.md-editor-container.md-editor-resizable:not(.fullscreen) .md-layout .editor-container{height:calc(100% - 70px)}.md-editor-container.md-editor-resizable:not(.fullscreen) .md-footer{z-index:-1}.md-editor-container.font-awesome5 .fa.fa-header::before{content:\"\uF1DC\"}.md-editor-container.font-awesome5 .fa.fa-file-code-o::before{content:\"\uF121\"}.md-editor-container.font-awesome5 .fa.fa-arrows-alt::before{content:\"\uF065\"}.md-editor-container .md-layout{height:100%;display:flex;flex-direction:column}.md-editor-container .md-layout .tool-bar{background-color:#f5f5f5;border-bottom:1px solid rgba(0,0,0,.1)}.md-editor-container .md-layout .tool-bar .btn-group{padding:6px}.md-editor-container .md-layout .tool-bar .btn-group:first-child>.btn:first-child::before{display:none}.md-editor-container .md-layout .tool-bar .btn-group>.btn:first-child::before{content:\" \";background-color:#a9a9a9;width:1px;height:24px;left:-9px;top:2px;position:absolute}.md-editor-container .md-layout .tool-bar .btn-group.hide-split>.btn:first-child::before{display:none}.md-editor-container .md-layout .tool-bar .btn{margin-bottom:0}.md-editor-container .md-layout .editor-container{flex:1;display:flex;height:calc(100% - 100px)}.md-editor-container .md-layout .editor-container>div{flex:1}.md-editor-container .md-layout .editor-container>div .drag-container{display:none}.md-editor-container .md-layout .editor-container>div.dragover{position:relative}.md-editor-container .md-layout .editor-container>div.dragover .drag-container{display:block;position:absolute;left:0;top:0;right:0;bottom:0;z-index:10;background-color:rgba(0,0,0,.4);display:flex;align-items:center;justify-content:center;font-size:50px;color:#fff}.md-editor-container .md-layout .editor-container>div.dragover .drag-container.drag-container-mask{background-color:transparent;z-index:11}.md-editor-container .md-layout .editor-container>div.dragover .drag-container .upload-loading{display:flex;flex-direction:column;align-items:center}.md-editor-container .md-layout .editor-container>div.dragover .drag-container .upload-loading .text{font-size:20px;margin-top:10px}.md-editor-container .md-layout .editor-container .editor-panel{height:100%}.md-editor-container .md-layout .editor-container .editor-panel .ace-editor{height:100%;min-height:100%}.md-editor-container .md-layout .preview-container{overflow:auto}.md-editor-container .md-layout .preview-container .preview-panel{height:100%;border-left:1px solid rgba(0,0,0,.1);background-color:#fff;padding:10px}.md-editor-container .md-layout .md-footer{background-color:#f0f0f0;border-top:1px solid rgba(0,0,0,.1);display:flex;align-items:center}.md-editor-container .md-layout .md-footer .length-view{flex:1;padding:4px 2px 0;font-size:12px;line-height:16px}.md-editor-container .md-layout .md-footer .resize-btn{width:17px}.md-editor-container .pull-right{float:right}"]
            }),
            __param(0, core.Attribute('required')),
            __param(1, core.Attribute('maxlength')),
            __metadata("design:paramtypes", [Boolean, Number, core.NgZone,
                core.Renderer2,
                platformBrowser.DomSanitizer])
        ], MarkdownEditorComponent);
        return MarkdownEditorComponent;
    }());

    var MarkdownEditorResizeSensorComponent = /** @class */ (function () {
        function MarkdownEditorResizeSensorComponent(_ngZone) {
            this._ngZone = _ngZone;
            this.interval = 500;
            this.resize = new core.EventEmitter();
            this.sizeInfo = {
                width: 0,
                height: 0
            };
        }
        MarkdownEditorResizeSensorComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.sizeInfo = {
                width: this.resizeSensor.nativeElement.offsetWidth,
                height: this.resizeSensor.nativeElement.offsetHeight
            };
            this._ngZone.runOutsideAngular(function () {
                setTimeout(function () {
                    _this.detectSize();
                }, _this.interval);
            });
        };
        MarkdownEditorResizeSensorComponent.prototype.detectSize = function () {
            var _this = this;
            var width = this.resizeSensor.nativeElement.offsetWidth;
            var height = this.resizeSensor.nativeElement.offsetHeight;
            if (this.sizeInfo.width !== width || this.sizeInfo.height !== height) {
                this.sizeInfo = {
                    width: width,
                    height: height
                };
                this.resize.emit(this.sizeInfo);
            }
            setTimeout(function () {
                _this.detectSize();
            }, this.interval);
        };
        MarkdownEditorResizeSensorComponent.ctorParameters = function () { return [
            { type: core.NgZone }
        ]; };
        __decorate([
            core.ViewChild('resizeSensor', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], MarkdownEditorResizeSensorComponent.prototype, "resizeSensor", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], MarkdownEditorResizeSensorComponent.prototype, "interval", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], MarkdownEditorResizeSensorComponent.prototype, "resize", void 0);
        MarkdownEditorResizeSensorComponent = __decorate([
            core.Component({
                selector: 'md-editor-resize-sensor',
                template: "<div class=\"md-editor-resize-sensor\" #resizeSensor></div>\r\n",
                styles: [".md-editor-resize-sensor{position:absolute;left:0;right:0;top:0;bottom:0;z-index:-1}"]
            }),
            __metadata("design:paramtypes", [core.NgZone])
        ], MarkdownEditorResizeSensorComponent);
        return MarkdownEditorResizeSensorComponent;
    }());

    var LMarkdownEditorModule = /** @class */ (function () {
        function LMarkdownEditorModule() {
        }
        LMarkdownEditorModule = __decorate([
            core.NgModule({
                declarations: [
                    MarkdownEditorComponent,
                    MarkdownEditorResizeSensorComponent
                ],
                imports: [
                    common.CommonModule,
                    forms.FormsModule
                ],
                exports: [
                    MarkdownEditorComponent,
                    MarkdownEditorResizeSensorComponent
                ]
            })
        ], LMarkdownEditorModule);
        return LMarkdownEditorModule;
    }());

    exports.LMarkdownEditorModule = LMarkdownEditorModule;
    exports.MarkdownEditorComponent = MarkdownEditorComponent;
    exports.MarkdownEditorResizeSensorComponent = MarkdownEditorResizeSensorComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-markdown-editor.umd.js.map
