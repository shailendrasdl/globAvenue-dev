import { __decorate, __metadata } from "tslib";
import { Component, NgZone, Input, Output, ViewChild, ElementRef, EventEmitter } from '@angular/core';
var MarkdownEditorResizeSensorComponent = /** @class */ (function () {
    function MarkdownEditorResizeSensorComponent(_ngZone) {
        this._ngZone = _ngZone;
        this.interval = 500;
        this.resize = new EventEmitter();
        this.sizeInfo = {
            width: 0,
            height: 0
        };
    }
    MarkdownEditorResizeSensorComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.sizeInfo = {
            width: this.resizeSensor.nativeElement.offsetWidth,
            height: this.resizeSensor.nativeElement.offsetHeight
        };
        this._ngZone.runOutsideAngular(function () {
            setTimeout(function () {
                _this.detectSize();
            }, _this.interval);
        });
    };
    MarkdownEditorResizeSensorComponent.prototype.detectSize = function () {
        var _this = this;
        var width = this.resizeSensor.nativeElement.offsetWidth;
        var height = this.resizeSensor.nativeElement.offsetHeight;
        if (this.sizeInfo.width !== width || this.sizeInfo.height !== height) {
            this.sizeInfo = {
                width: width,
                height: height
            };
            this.resize.emit(this.sizeInfo);
        }
        setTimeout(function () {
            _this.detectSize();
        }, this.interval);
    };
    MarkdownEditorResizeSensorComponent.ctorParameters = function () { return [
        { type: NgZone }
    ]; };
    __decorate([
        ViewChild('resizeSensor', { static: true }),
        __metadata("design:type", ElementRef)
    ], MarkdownEditorResizeSensorComponent.prototype, "resizeSensor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], MarkdownEditorResizeSensorComponent.prototype, "interval", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], MarkdownEditorResizeSensorComponent.prototype, "resize", void 0);
    MarkdownEditorResizeSensorComponent = __decorate([
        Component({
            selector: 'md-editor-resize-sensor',
            template: "<div class=\"md-editor-resize-sensor\" #resizeSensor></div>\r\n",
            styles: [".md-editor-resize-sensor{position:absolute;left:0;right:0;top:0;bottom:0;z-index:-1}"]
        }),
        __metadata("design:paramtypes", [NgZone])
    ], MarkdownEditorResizeSensorComponent);
    return MarkdownEditorResizeSensorComponent;
}());
export { MarkdownEditorResizeSensorComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplLXNlbnNvci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtbWFya2Rvd24tZWRpdG9yLyIsInNvdXJjZXMiOlsibGliL3Jlc2l6ZS1zZW5zb3IvcmVzaXplLXNlbnNvci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFRdEc7SUFZRSw2Q0FBb0IsT0FBZTtRQUFmLFlBQU8sR0FBUCxPQUFPLENBQVE7UUFSMUIsYUFBUSxHQUFXLEdBQUcsQ0FBQztRQUN0QixXQUFNLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7UUFFdEQsYUFBUSxHQUFRO1lBQ3RCLEtBQUssRUFBRSxDQUFDO1lBQ1IsTUFBTSxFQUFFLENBQUM7U0FDVixDQUFBO0lBSUQsQ0FBQztJQUVELDZEQUFlLEdBQWY7UUFBQSxpQkFVQztRQVRDLElBQUksQ0FBQyxRQUFRLEdBQUc7WUFDZCxLQUFLLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsV0FBVztZQUNsRCxNQUFNLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsWUFBWTtTQUNyRCxDQUFBO1FBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztZQUM3QixVQUFVLENBQUM7Z0JBQ1QsS0FBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ3BCLENBQUMsRUFBRSxLQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8sd0RBQVUsR0FBbEI7UUFBQSxpQkFhQztRQVpDLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQztRQUN4RCxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUM7UUFDMUQsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssS0FBSyxLQUFLLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEtBQUssTUFBTSxFQUFFO1lBQ3BFLElBQUksQ0FBQyxRQUFRLEdBQUc7Z0JBQ2QsS0FBSyxFQUFFLEtBQUs7Z0JBQ1osTUFBTSxFQUFFLE1BQU07YUFDZixDQUFBO1lBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ2pDO1FBQ0QsVUFBVSxDQUFDO1lBQ1QsS0FBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3BCLENBQUMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDcEIsQ0FBQzs7Z0JBN0I0QixNQUFNOztJQVZVO1FBQTVDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUM7a0NBQWUsVUFBVTs2RUFBQztJQUU3RDtRQUFSLEtBQUssRUFBRTs7eUVBQXdCO0lBQ3RCO1FBQVQsTUFBTSxFQUFFO2tDQUFTLFlBQVk7dUVBQWdDO0lBTG5ELG1DQUFtQztRQU4vQyxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUseUJBQXlCO1lBQ25DLDJFQUFtQzs7U0FFcEMsQ0FBQzt5Q0FjNkIsTUFBTTtPQVp4QixtQ0FBbUMsQ0EwQy9DO0lBQUQsMENBQUM7Q0FBQSxBQTFDRCxJQTBDQztTQTFDWSxtQ0FBbUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE5nWm9uZSwgSW5wdXQsIE91dHB1dCwgVmlld0NoaWxkLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnbWQtZWRpdG9yLXJlc2l6ZS1zZW5zb3InLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9yZXNpemUtc2Vuc29yLmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL3Jlc2l6ZS1zZW5zb3Iuc2NzcyddXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgTWFya2Rvd25FZGl0b3JSZXNpemVTZW5zb3JDb21wb25lbnQge1xyXG5cclxuICBAVmlld0NoaWxkKCdyZXNpemVTZW5zb3InLCB7IHN0YXRpYzogdHJ1ZSB9KSByZXNpemVTZW5zb3I6IEVsZW1lbnRSZWY7XHJcblxyXG4gIEBJbnB1dCgpIGludGVydmFsOiBudW1iZXIgPSA1MDA7XHJcbiAgQE91dHB1dCgpIHJlc2l6ZTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuXHJcbiAgcHJpdmF0ZSBzaXplSW5mbzogYW55ID0ge1xyXG4gICAgd2lkdGg6IDAsXHJcbiAgICBoZWlnaHQ6IDBcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX25nWm9uZTogTmdab25lKSB7XHJcblxyXG4gIH1cclxuXHJcbiAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgdGhpcy5zaXplSW5mbyA9IHtcclxuICAgICAgd2lkdGg6IHRoaXMucmVzaXplU2Vuc29yLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGgsXHJcbiAgICAgIGhlaWdodDogdGhpcy5yZXNpemVTZW5zb3IubmF0aXZlRWxlbWVudC5vZmZzZXRIZWlnaHRcclxuICAgIH1cclxuICAgIHRoaXMuX25nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuZGV0ZWN0U2l6ZSgpO1xyXG4gICAgICB9LCB0aGlzLmludGVydmFsKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBkZXRlY3RTaXplKCkge1xyXG4gICAgbGV0IHdpZHRoID0gdGhpcy5yZXNpemVTZW5zb3IubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aDtcclxuICAgIGxldCBoZWlnaHQgPSB0aGlzLnJlc2l6ZVNlbnNvci5uYXRpdmVFbGVtZW50Lm9mZnNldEhlaWdodDtcclxuICAgIGlmICh0aGlzLnNpemVJbmZvLndpZHRoICE9PSB3aWR0aCB8fCB0aGlzLnNpemVJbmZvLmhlaWdodCAhPT0gaGVpZ2h0KSB7XHJcbiAgICAgIHRoaXMuc2l6ZUluZm8gPSB7XHJcbiAgICAgICAgd2lkdGg6IHdpZHRoLFxyXG4gICAgICAgIGhlaWdodDogaGVpZ2h0XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5yZXNpemUuZW1pdCh0aGlzLnNpemVJbmZvKTtcclxuICAgIH1cclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICB0aGlzLmRldGVjdFNpemUoKTtcclxuICAgIH0sIHRoaXMuaW50ZXJ2YWwpO1xyXG4gIH1cclxufVxyXG4iXX0=