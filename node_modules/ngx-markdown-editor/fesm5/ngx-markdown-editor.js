import { __values, __decorate, __metadata, __param } from 'tslib';
import { EventEmitter, Attribute, NgZone, Renderer2, ViewChild, ElementRef, Input, Output, Component, forwardRef, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule } from '@angular/forms';
import { DomSanitizer } from '@angular/platform-browser';

var DEFAULT_EDITOR_OPTION = {
    showPreviewPanel: true,
    showBorder: true,
    hideIcons: [],
    usingFontAwesome5: false,
    scrollPastEnd: 0,
    enablePreviewContentClick: false,
    resizable: false
};
var MarkdownEditorComponent = /** @class */ (function () {
    function MarkdownEditorComponent(required, maxlength, _ngZone, _renderer2, _domSanitizer) {
        if (required === void 0) { required = false; }
        if (maxlength === void 0) { maxlength = -1; }
        this.required = required;
        this.maxlength = maxlength;
        this._ngZone = _ngZone;
        this._renderer2 = _renderer2;
        this._domSanitizer = _domSanitizer;
        this.hideToolbar = false;
        this.height = "300px";
        this._mode = 'editor';
        this._options = {};
        this.onEditorLoaded = new EventEmitter();
        this.onPreviewDomChanged = new EventEmitter();
        this.hideIcons = {};
        this.showPreviewPanel = true;
        this.isFullScreen = false;
        this.dragover = false;
        this.isUploading = false;
        this._onChange = function (_) { };
        this._onTouched = function () { };
    }
    MarkdownEditorComponent_1 = MarkdownEditorComponent;
    Object.defineProperty(MarkdownEditorComponent.prototype, "mode", {
        get: function () {
            return this._mode;
        },
        set: function (value) {
            var _this = this;
            this._mode = (!value || ['editor', 'preview'].indexOf(value.toLowerCase()) === -1)
                ? 'editor'
                : value;
            setTimeout(function () {
                if (_this._aceEditorIns && typeof _this._aceEditorIns.resize === 'function') {
                    _this._aceEditorIns.resize();
                }
            }, 100);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MarkdownEditorComponent.prototype, "options", {
        get: function () {
            return this._options || {};
        },
        set: function (value) {
            var _options = Object.assign(DEFAULT_EDITOR_OPTION, {}, value);
            var _hideIcons = {};
            if (typeof _options.showPreviewPanel === 'boolean') {
                this.showPreviewPanel = _options.showPreviewPanel;
            }
            if (Array.isArray(_options.hideIcons)) {
                _options.hideIcons.forEach(function (v) { return _hideIcons[v] = true; });
            }
            this._options = _options;
            this.hideIcons = _hideIcons;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MarkdownEditorComponent.prototype, "markdownValue", {
        //#region Markdown value and html value define
        get: function () {
            return this._markdownValue || '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MarkdownEditorComponent.prototype, "_hasUploadFunction", {
        get: function () {
            return this.upload && this.upload instanceof Function;
        },
        enumerable: true,
        configurable: true
    });
    MarkdownEditorComponent.prototype.ngOnInit = function () {
        var markedRender = new marked.Renderer();
        markedRender.image = this._getRender('image');
        markedRender.code = this._getRender('code');
        markedRender.table = this._getRender('table');
        markedRender.listitem = this._getRender('listitem');
        var markedjsOpt = {
            renderer: markedRender,
            highlight: function (code) { return hljs.highlightAuto(code).value; }
        };
        this._markedJsOpt = Object.assign({}, markedjsOpt, this.options.markedjsOpt);
    };
    MarkdownEditorComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        var editorElement = this.aceEditorContainer.nativeElement;
        var editor = ace.edit(editorElement);
        editor.$blockScrolling = Infinity;
        editor.getSession().setUseWrapMode(true);
        editor.getSession().setMode("ace/mode/markdown");
        editor.setValue(this.markdownValue, 1);
        editor.setOption('scrollPastEnd', this._options.scrollPastEnd || 0);
        editor.on('change', function (e) {
            if (_this._isValueSettedByprogrammatically)
                return;
            var val = editor.getValue();
            _this._updateMarkdownValue(val, true);
            _this._onChange(_this.markdownValue);
        });
        editor.on('blur', function () { _this._onTouched(); });
        this.onEditorLoaded.next(editor);
        this._aceEditorIns = editor;
    };
    MarkdownEditorComponent.prototype.ngOnDestroy = function () {
        this._aceEditorIns && this._aceEditorIns.destroy();
    };
    MarkdownEditorComponent.prototype.writeValue = function (value) {
        this._updateMarkdownValue(value, false);
    };
    MarkdownEditorComponent.prototype.registerOnChange = function (fn) {
        this._onChange = fn;
    };
    MarkdownEditorComponent.prototype.registerOnTouched = function (fn) {
        this._onTouched = fn;
    };
    MarkdownEditorComponent.prototype.validate = function (c) {
        var result = null;
        if (this.required && this.markdownValue.length === 0) {
            result = { required: true };
        }
        if (this.maxlength > 0 && this.markdownValue.length > this.maxlength) {
            result = { maxlength: true };
        }
        return result;
    };
    MarkdownEditorComponent.prototype.insertContent = function (type, customContent) {
        if (!this._aceEditorIns)
            return;
        var selectedText = this._aceEditorIns.getSelectedText();
        var isSelected = !!selectedText;
        var startSize = 2;
        var initText = '';
        var range = this._aceEditorIns.selection.getRange();
        switch (type) {
            case 'Bold':
                initText = 'Bold Text';
                selectedText = "**" + (selectedText || initText) + "**";
                break;
            case 'Italic':
                initText = 'Italic Text';
                selectedText = "*" + (selectedText || initText) + "*";
                startSize = 1;
                break;
            case 'Heading':
                initText = 'Heading';
                selectedText = "# " + (selectedText || initText);
                break;
            case 'Refrence':
                initText = 'Refrence';
                selectedText = "> " + (selectedText || initText);
                break;
            case 'Link':
                selectedText = "[](http://)";
                startSize = 1;
                break;
            case 'Image':
                selectedText = "![](http://)";
                break;
            case 'Ul':
                selectedText = "- " + (selectedText || initText);
                break;
            case 'Ol':
                selectedText = "1. " + (selectedText || initText);
                startSize = 3;
                break;
            case 'Code':
                initText = 'Source Code';
                selectedText = "```language\r\n" + (selectedText || initText) + "\r\n```";
                startSize = 3;
                break;
            case 'Custom':
                selectedText = customContent;
                startSize = 0;
                break;
        }
        this._aceEditorIns.session.replace(range, selectedText);
        if (!isSelected) {
            range.start.column += startSize;
            range.end.column = range.start.column + initText.length;
            this._aceEditorIns.selection.setRange(range);
        }
        this._aceEditorIns.focus();
    };
    MarkdownEditorComponent.prototype.togglePreview = function () {
        this.showPreviewPanel = !this.showPreviewPanel;
        this.editorResize();
    };
    MarkdownEditorComponent.prototype.previewPanelClick = function (event) {
        if (this.options.enablePreviewContentClick !== true) {
            event.preventDefault();
            event.stopImmediatePropagation();
        }
    };
    MarkdownEditorComponent.prototype.fullScreen = function () {
        this.isFullScreen = !this.isFullScreen;
        this._renderer2.setStyle(document.body, 'overflowY', this.isFullScreen ? 'hidden' : 'auto');
        this.editorResize();
    };
    MarkdownEditorComponent.prototype.mdEditorResize = function (size) {
        this.editorResize();
    };
    MarkdownEditorComponent.prototype.editorResize = function (timeOut) {
        var _this = this;
        if (timeOut === void 0) { timeOut = 100; }
        if (!this._aceEditorIns)
            return;
        if (this._aceEditorResizeTimer)
            clearTimeout(this._aceEditorResizeTimer);
        this._aceEditorResizeTimer = setTimeout(function () {
            _this._aceEditorIns.resize();
            _this._aceEditorIns.focus();
        }, timeOut);
    };
    MarkdownEditorComponent.prototype.onDragover = function (evt) {
        evt.stopImmediatePropagation();
        evt.preventDefault();
        if (!this._hasUploadFunction)
            return;
        this.dragover = true;
    };
    MarkdownEditorComponent.prototype.onDrop = function (evt) {
        var _this = this;
        evt.stopImmediatePropagation();
        evt.preventDefault();
        if (!this._hasUploadFunction || this.isUploading)
            return;
        if (!evt.dataTransfer.files || evt.dataTransfer.files.length === 0) {
            this.dragover = false;
            return;
        }
        this.isUploading = true;
        Promise.resolve()
            .then(function () {
            return _this.upload(evt.dataTransfer.files);
        })
            .then(function (data) {
            var e_1, _a;
            if (Array.isArray(data)) {
                var msg = [];
                try {
                    for (var data_1 = __values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
                        var item = data_1_1.value;
                        var tempMsg = "[" + item.name + "](" + item.url + ")";
                        if (item.isImg) {
                            tempMsg = "!" + tempMsg;
                        }
                        msg.push(tempMsg);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                _this.insertContent('Custom', msg.join('\r\n'));
            }
            else {
                console.warn('Invalid upload result. Please using follow this type `UploadResult`.');
            }
            _this.isUploading = false;
            _this.dragover = false;
        })
            .catch(function (err) {
            console.error(err);
            _this.isUploading = false;
            _this.dragover = false;
        });
    };
    MarkdownEditorComponent.prototype.onDragleave = function (evt) {
        evt.stopImmediatePropagation();
        evt.preventDefault();
        if (!this._hasUploadFunction)
            return;
        this.dragover = false;
    };
    MarkdownEditorComponent.prototype._updateMarkdownValue = function (value, changedByUser) {
        if (changedByUser === void 0) { changedByUser = false; }
        var normalizedValue = typeof value === 'string' ? value : (value || '').toString();
        if (this._markdownValue === normalizedValue)
            return;
        this._markdownValue = normalizedValue;
        this._updateDom();
        if (this._aceEditorIns && !changedByUser) {
            this._isValueSettedByprogrammatically = true;
            this._aceEditorIns.setValue(normalizedValue, 1);
            this._isValueSettedByprogrammatically = false;
        }
    };
    MarkdownEditorComponent.prototype._updateDom = function () {
        var _this = this;
        if (this._convertMarkdownToHtmlTimer)
            clearTimeout(this._convertMarkdownToHtmlTimer);
        this._convertMarkdownToHtmlTimer = setTimeout(function () {
            Promise.resolve(_this.markdownValue)
                .then(function (mdContent) {
                return (_this.preRender && _this.preRender instanceof Function) ? _this.preRender(mdContent) : mdContent;
            })
                .then(function (mdContent) {
                var html = marked(mdContent || '', _this._markedJsOpt);
                return (_this.postRender && _this.postRender instanceof Function) ? _this.postRender(html) : html;
            })
                .then(function (parsedHtml) {
                _this.previewHtml = _this._domSanitizer.bypassSecurityTrustHtml(parsedHtml);
                if (_this.previewContainer && _this.previewContainer.nativeElement) {
                    _this._ngZone.runOutsideAngular(function () {
                        _this._renderer2.setProperty(_this.previewContainer.nativeElement, 'innerHTML', parsedHtml);
                        setTimeout(function () { _this.onPreviewDomChanged.next(_this.previewContainer.nativeElement); }, 100);
                    });
                }
            })
                .catch(function (err) {
                console.error(err);
            });
        }, 100);
    };
    MarkdownEditorComponent.prototype._getRender = function (renderType) {
        var customRender = this.options && this.options.customRender && this.options.customRender[renderType];
        if (customRender && typeof customRender === 'function') {
            return customRender;
        }
        else {
            switch (renderType) {
                case 'image':
                    return function (href, title, text) {
                        var out = "<img style=\"max-width: 100%;\" src=\"" + href + "\" alt=\"" + text + "\"";
                        if (title) {
                            out += " title=\"" + title + "\"";
                        }
                        out += this.options.xhtml ? "/>" : ">";
                        return out;
                    };
                case 'code':
                    return function (code, language) {
                        var validLang = !!(language && hljs.getLanguage(language));
                        var highlighted = validLang ? hljs.highlight(language, code).value : code;
                        return "<pre style=\"padding: 0; border-radius: 0;\"><code class=\"hljs " + language + "\">" + highlighted + "</code></pre>";
                    };
                case 'table':
                    return function (header, body) {
                        return "<table class=\"table table-bordered\">\n<thead>\n" + header + "</thead>\n<tbody>\n" + body + "</tbody>\n</table>\n";
                    };
                case 'listitem':
                    return function (text, task, checked) {
                        if (/^\s*\[[x ]\]\s*/.test(text) || text.startsWith('<input')) {
                            if (text.startsWith('<input')) {
                                text = text
                                    .replace('<input disabled="" type="checkbox">', '<i class="fa fa-square-o"></i>')
                                    .replace('<input checked="" disabled="" type="checkbox">', '<i class="fa fa-check-square"></i>');
                            }
                            else {
                                text = text
                                    .replace(/^\s*\[ \]\s*/, '<i class="fa fa-square-o"></i> ')
                                    .replace(/^\s*\[x\]\s*/, '<i class="fa fa-check-square"></i> ');
                            }
                            return "<li>" + text + "</li>";
                        }
                        else {
                            return "<li>" + text + "</li>";
                        }
                    };
            }
        }
    };
    var MarkdownEditorComponent_1;
    MarkdownEditorComponent.ctorParameters = function () { return [
        { type: Boolean, decorators: [{ type: Attribute, args: ['required',] }] },
        { type: Number, decorators: [{ type: Attribute, args: ['maxlength',] }] },
        { type: NgZone },
        { type: Renderer2 },
        { type: DomSanitizer }
    ]; };
    __decorate([
        ViewChild('aceEditor', { static: true }),
        __metadata("design:type", ElementRef)
    ], MarkdownEditorComponent.prototype, "aceEditorContainer", void 0);
    __decorate([
        ViewChild('previewContainer', { static: true }),
        __metadata("design:type", ElementRef)
    ], MarkdownEditorComponent.prototype, "previewContainer", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], MarkdownEditorComponent.prototype, "hideToolbar", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], MarkdownEditorComponent.prototype, "height", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Function)
    ], MarkdownEditorComponent.prototype, "preRender", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Function)
    ], MarkdownEditorComponent.prototype, "postRender", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Function)
    ], MarkdownEditorComponent.prototype, "upload", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], MarkdownEditorComponent.prototype, "mode", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], MarkdownEditorComponent.prototype, "options", null);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], MarkdownEditorComponent.prototype, "onEditorLoaded", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], MarkdownEditorComponent.prototype, "onPreviewDomChanged", void 0);
    MarkdownEditorComponent = MarkdownEditorComponent_1 = __decorate([
        Component({
            selector: 'md-editor',
            template: "<div class=\"md-editor-container\" [class.font-awesome5]=\"options?.usingFontAwesome5\" [class.fullscreen]=\"isFullScreen\"\r\n  [class.md-editor-resizable]=\"options?.resizable\" [style.height]=\"height\">\r\n  <div class=\"md-layout\">\r\n    <div class=\"tool-bar\" *ngIf=\"!hideToolbar && mode != 'preview'\">\r\n      <div class=\"btn-group\">\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Bold\" (click)=\"insertContent('Bold')\"\r\n          *ngIf=\"!hideIcons.Bold\">\r\n          <i class=\"fa fa-bold\"></i>\r\n        </button>\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Italic\" (click)=\"insertContent('Italic')\"\r\n          *ngIf=\"!hideIcons.Italic\">\r\n          <i class=\"fa fa-italic\"></i>\r\n        </button>\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Heading\" (click)=\"insertContent('Heading')\"\r\n          *ngIf=\"!hideIcons.Heading\">\r\n          <i class=\"fa fa-header\"></i>\r\n        </button>\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Refrence\" (click)=\"insertContent('Refrence')\"\r\n          *ngIf=\"!hideIcons.Refrence\">\r\n          <i class=\"fa fa-quote-left\"></i>\r\n        </button>\r\n      </div>\r\n      <div class=\"btn-group\">\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Link\" (click)=\"insertContent('Link')\"\r\n          *ngIf=\"!hideIcons.Link\">\r\n          <i class=\"fa fa-link\"></i>\r\n        </button>\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Image\" (click)=\"insertContent('Image')\"\r\n          *ngIf=\"!hideIcons.Image\">\r\n          <i class=\"fa fa-image\"></i>\r\n        </button>\r\n      </div>\r\n      <div class=\"btn-group\">\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Unordered List\" (click)=\"insertContent('Ul')\"\r\n          *ngIf=\"!hideIcons.Ul\">\r\n          <i class=\"fa fa-list-ul\"></i>\r\n        </button>\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Ordered List\" (click)=\"insertContent('Ol')\"\r\n          *ngIf=\"!hideIcons.Ol\">\r\n          <i class=\"fa fa-list-ol\"></i>\r\n        </button>\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Code Block\" (click)=\"insertContent('Code')\"\r\n          *ngIf=\"!hideIcons.Code\">\r\n          <i class=\"fa fa-file-code-o\"></i>\r\n        </button>\r\n      </div>\r\n      <div class=\"btn-group\">\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\"\r\n          [attr.title]=\"showPreviewPanel ? 'Hide Preview' : 'Show Preview'\" (click)=\"togglePreview()\"\r\n          *ngIf=\"!hideIcons.TogglePreview\">\r\n          <i class=\"fa\" [class.fa-eye]=\"!showPreviewPanel\" [class.fa-eye-slash]=\"showPreviewPanel\"></i>\r\n        </button>\r\n      </div>\r\n      <div class=\"btn-group pull-right hide-split\">\r\n        <button class=\"btn btn-sm btn-default\" type=\"button\" [class.active]=\"isFullScreen\" (click)=\"fullScreen()\"\r\n          *ngIf=\"!hideIcons.FullScreen\">\r\n          <i class=\"fa\" [class.fa-arrows-alt]=\"!options?.usingFontAwesome5 || !isFullScreen\"\r\n            [class.fa-compress]=\"options?.usingFontAwesome5 && isFullScreen\"></i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <div class=\"editor-container\">\r\n      <div [class.dragover]=\"dragover\" [style.display]=\"mode == 'preview' ? 'none' : null\"\r\n        (dragover)=\"onDragover($event)\">\r\n        <div class=\"drag-container\">\r\n          <div class=\"upload-loading\">\r\n            <i class=\"fa fa-upload\" *ngIf=\"!isUploading\"></i>\r\n            <i class=\"fa fa-spinner fa-pulse fa-fw\" *ngIf=\"isUploading\"></i>\r\n            <div class=\"text\">{{ isUploading ? 'Uploading' : 'Drag it here' }}</div>\r\n          </div>\r\n        </div>\r\n        <div class=\"drag-container drag-container-mask\" (drop)=\"onDrop($event)\" (dragleave)=\"onDragleave($event)\"></div>\r\n        <div class=\"editor-panel\">\r\n          <div class=\"ace-editor\" #aceEditor></div>\r\n        </div>\r\n      </div>\r\n      <div class=\"preview-container\" [style.display]=\"(mode == 'preview' || showPreviewPanel) ? 'block' : 'none'\"\r\n        (click)=\"previewPanelClick($event)\">\r\n        <div class=\"preview-panel\" #previewContainer></div>\r\n      </div>\r\n    </div>\r\n    <div class=\"md-footer\" *ngIf=\"maxlength > 0 && mode != 'preview'\">\r\n      <div class=\"text-right length-view\">\r\n        {{ markdownValue?.length }} / {{ maxlength }}\r\n      </div>\r\n      <div class=\"resize-btn\"></div>\r\n    </div>\r\n  </div>\r\n  <md-editor-resize-sensor *ngIf=\"options?.resizable\" (resize)=\"mdEditorResize($event)\"></md-editor-resize-sensor>\r\n</div>\r\n",
            providers: [
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return MarkdownEditorComponent_1; }),
                    multi: true
                },
                {
                    provide: NG_VALIDATORS,
                    useExisting: forwardRef(function () { return MarkdownEditorComponent_1; }),
                    multi: true
                }
            ],
            styles: ["@charset \"UTF-8\";.md-editor-container{position:relative;height:100%;margin-bottom:15px;border:1px solid rgba(0,0,0,.1)}.md-editor-container.fullscreen{margin:0;position:fixed;border:0;top:0;left:0;width:100%!important;height:100%!important;z-index:99999999}.md-editor-container.md-editor-resizable:not(.fullscreen){resize:both;overflow:hidden;display:inline-block;width:100%}.md-editor-container.md-editor-resizable:not(.fullscreen) .md-layout .editor-container{height:calc(100% - 70px)}.md-editor-container.md-editor-resizable:not(.fullscreen) .md-footer{z-index:-1}.md-editor-container.font-awesome5 .fa.fa-header::before{content:\"\uF1DC\"}.md-editor-container.font-awesome5 .fa.fa-file-code-o::before{content:\"\uF121\"}.md-editor-container.font-awesome5 .fa.fa-arrows-alt::before{content:\"\uF065\"}.md-editor-container .md-layout{height:100%;display:flex;flex-direction:column}.md-editor-container .md-layout .tool-bar{background-color:#f5f5f5;border-bottom:1px solid rgba(0,0,0,.1)}.md-editor-container .md-layout .tool-bar .btn-group{padding:6px}.md-editor-container .md-layout .tool-bar .btn-group:first-child>.btn:first-child::before{display:none}.md-editor-container .md-layout .tool-bar .btn-group>.btn:first-child::before{content:\" \";background-color:#a9a9a9;width:1px;height:24px;left:-9px;top:2px;position:absolute}.md-editor-container .md-layout .tool-bar .btn-group.hide-split>.btn:first-child::before{display:none}.md-editor-container .md-layout .tool-bar .btn{margin-bottom:0}.md-editor-container .md-layout .editor-container{flex:1;display:flex;height:calc(100% - 100px)}.md-editor-container .md-layout .editor-container>div{flex:1}.md-editor-container .md-layout .editor-container>div .drag-container{display:none}.md-editor-container .md-layout .editor-container>div.dragover{position:relative}.md-editor-container .md-layout .editor-container>div.dragover .drag-container{display:block;position:absolute;left:0;top:0;right:0;bottom:0;z-index:10;background-color:rgba(0,0,0,.4);display:flex;align-items:center;justify-content:center;font-size:50px;color:#fff}.md-editor-container .md-layout .editor-container>div.dragover .drag-container.drag-container-mask{background-color:transparent;z-index:11}.md-editor-container .md-layout .editor-container>div.dragover .drag-container .upload-loading{display:flex;flex-direction:column;align-items:center}.md-editor-container .md-layout .editor-container>div.dragover .drag-container .upload-loading .text{font-size:20px;margin-top:10px}.md-editor-container .md-layout .editor-container .editor-panel{height:100%}.md-editor-container .md-layout .editor-container .editor-panel .ace-editor{height:100%;min-height:100%}.md-editor-container .md-layout .preview-container{overflow:auto}.md-editor-container .md-layout .preview-container .preview-panel{height:100%;border-left:1px solid rgba(0,0,0,.1);background-color:#fff;padding:10px}.md-editor-container .md-layout .md-footer{background-color:#f0f0f0;border-top:1px solid rgba(0,0,0,.1);display:flex;align-items:center}.md-editor-container .md-layout .md-footer .length-view{flex:1;padding:4px 2px 0;font-size:12px;line-height:16px}.md-editor-container .md-layout .md-footer .resize-btn{width:17px}.md-editor-container .pull-right{float:right}"]
        }),
        __param(0, Attribute('required')),
        __param(1, Attribute('maxlength')),
        __metadata("design:paramtypes", [Boolean, Number, NgZone,
            Renderer2,
            DomSanitizer])
    ], MarkdownEditorComponent);
    return MarkdownEditorComponent;
}());

var MarkdownEditorResizeSensorComponent = /** @class */ (function () {
    function MarkdownEditorResizeSensorComponent(_ngZone) {
        this._ngZone = _ngZone;
        this.interval = 500;
        this.resize = new EventEmitter();
        this.sizeInfo = {
            width: 0,
            height: 0
        };
    }
    MarkdownEditorResizeSensorComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.sizeInfo = {
            width: this.resizeSensor.nativeElement.offsetWidth,
            height: this.resizeSensor.nativeElement.offsetHeight
        };
        this._ngZone.runOutsideAngular(function () {
            setTimeout(function () {
                _this.detectSize();
            }, _this.interval);
        });
    };
    MarkdownEditorResizeSensorComponent.prototype.detectSize = function () {
        var _this = this;
        var width = this.resizeSensor.nativeElement.offsetWidth;
        var height = this.resizeSensor.nativeElement.offsetHeight;
        if (this.sizeInfo.width !== width || this.sizeInfo.height !== height) {
            this.sizeInfo = {
                width: width,
                height: height
            };
            this.resize.emit(this.sizeInfo);
        }
        setTimeout(function () {
            _this.detectSize();
        }, this.interval);
    };
    MarkdownEditorResizeSensorComponent.ctorParameters = function () { return [
        { type: NgZone }
    ]; };
    __decorate([
        ViewChild('resizeSensor', { static: true }),
        __metadata("design:type", ElementRef)
    ], MarkdownEditorResizeSensorComponent.prototype, "resizeSensor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], MarkdownEditorResizeSensorComponent.prototype, "interval", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], MarkdownEditorResizeSensorComponent.prototype, "resize", void 0);
    MarkdownEditorResizeSensorComponent = __decorate([
        Component({
            selector: 'md-editor-resize-sensor',
            template: "<div class=\"md-editor-resize-sensor\" #resizeSensor></div>\r\n",
            styles: [".md-editor-resize-sensor{position:absolute;left:0;right:0;top:0;bottom:0;z-index:-1}"]
        }),
        __metadata("design:paramtypes", [NgZone])
    ], MarkdownEditorResizeSensorComponent);
    return MarkdownEditorResizeSensorComponent;
}());

var LMarkdownEditorModule = /** @class */ (function () {
    function LMarkdownEditorModule() {
    }
    LMarkdownEditorModule = __decorate([
        NgModule({
            declarations: [
                MarkdownEditorComponent,
                MarkdownEditorResizeSensorComponent
            ],
            imports: [
                CommonModule,
                FormsModule
            ],
            exports: [
                MarkdownEditorComponent,
                MarkdownEditorResizeSensorComponent
            ]
        })
    ], LMarkdownEditorModule);
    return LMarkdownEditorModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { LMarkdownEditorModule, MarkdownEditorComponent, MarkdownEditorResizeSensorComponent };
//# sourceMappingURL=ngx-markdown-editor.js.map
