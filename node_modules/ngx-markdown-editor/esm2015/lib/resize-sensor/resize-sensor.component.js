import { __decorate, __metadata } from "tslib";
import { Component, NgZone, Input, Output, ViewChild, ElementRef, EventEmitter } from '@angular/core';
let MarkdownEditorResizeSensorComponent = class MarkdownEditorResizeSensorComponent {
    constructor(_ngZone) {
        this._ngZone = _ngZone;
        this.interval = 500;
        this.resize = new EventEmitter();
        this.sizeInfo = {
            width: 0,
            height: 0
        };
    }
    ngAfterViewInit() {
        this.sizeInfo = {
            width: this.resizeSensor.nativeElement.offsetWidth,
            height: this.resizeSensor.nativeElement.offsetHeight
        };
        this._ngZone.runOutsideAngular(() => {
            setTimeout(() => {
                this.detectSize();
            }, this.interval);
        });
    }
    detectSize() {
        let width = this.resizeSensor.nativeElement.offsetWidth;
        let height = this.resizeSensor.nativeElement.offsetHeight;
        if (this.sizeInfo.width !== width || this.sizeInfo.height !== height) {
            this.sizeInfo = {
                width: width,
                height: height
            };
            this.resize.emit(this.sizeInfo);
        }
        setTimeout(() => {
            this.detectSize();
        }, this.interval);
    }
};
MarkdownEditorResizeSensorComponent.ctorParameters = () => [
    { type: NgZone }
];
__decorate([
    ViewChild('resizeSensor', { static: true }),
    __metadata("design:type", ElementRef)
], MarkdownEditorResizeSensorComponent.prototype, "resizeSensor", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], MarkdownEditorResizeSensorComponent.prototype, "interval", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], MarkdownEditorResizeSensorComponent.prototype, "resize", void 0);
MarkdownEditorResizeSensorComponent = __decorate([
    Component({
        selector: 'md-editor-resize-sensor',
        template: "<div class=\"md-editor-resize-sensor\" #resizeSensor></div>\r\n",
        styles: [".md-editor-resize-sensor{position:absolute;left:0;right:0;top:0;bottom:0;z-index:-1}"]
    }),
    __metadata("design:paramtypes", [NgZone])
], MarkdownEditorResizeSensorComponent);
export { MarkdownEditorResizeSensorComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplLXNlbnNvci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtbWFya2Rvd24tZWRpdG9yLyIsInNvdXJjZXMiOlsibGliL3Jlc2l6ZS1zZW5zb3IvcmVzaXplLXNlbnNvci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFRdEcsSUFBYSxtQ0FBbUMsR0FBaEQsTUFBYSxtQ0FBbUM7SUFZOUMsWUFBb0IsT0FBZTtRQUFmLFlBQU8sR0FBUCxPQUFPLENBQVE7UUFSMUIsYUFBUSxHQUFXLEdBQUcsQ0FBQztRQUN0QixXQUFNLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7UUFFdEQsYUFBUSxHQUFRO1lBQ3RCLEtBQUssRUFBRSxDQUFDO1lBQ1IsTUFBTSxFQUFFLENBQUM7U0FDVixDQUFBO0lBSUQsQ0FBQztJQUVELGVBQWU7UUFDYixJQUFJLENBQUMsUUFBUSxHQUFHO1lBQ2QsS0FBSyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLFdBQVc7WUFDbEQsTUFBTSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLFlBQVk7U0FDckQsQ0FBQTtRQUNELElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2xDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2QsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ3BCLENBQUMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8sVUFBVTtRQUNoQixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUM7UUFDeEQsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDO1FBQzFELElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEtBQUssS0FBSyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxLQUFLLE1BQU0sRUFBRTtZQUNwRSxJQUFJLENBQUMsUUFBUSxHQUFHO2dCQUNkLEtBQUssRUFBRSxLQUFLO2dCQUNaLE1BQU0sRUFBRSxNQUFNO2FBQ2YsQ0FBQTtZQUNELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNqQztRQUNELFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDZCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDcEIsQ0FBQyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNwQixDQUFDO0NBQ0YsQ0FBQTs7WUE5QjhCLE1BQU07O0FBVlU7SUFBNUMsU0FBUyxDQUFDLGNBQWMsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQzs4QkFBZSxVQUFVO3lFQUFDO0FBRTdEO0lBQVIsS0FBSyxFQUFFOztxRUFBd0I7QUFDdEI7SUFBVCxNQUFNLEVBQUU7OEJBQVMsWUFBWTttRUFBZ0M7QUFMbkQsbUNBQW1DO0lBTi9DLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSx5QkFBeUI7UUFDbkMsMkVBQW1DOztLQUVwQyxDQUFDO3FDQWM2QixNQUFNO0dBWnhCLG1DQUFtQyxDQTBDL0M7U0ExQ1ksbUNBQW1DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBOZ1pvbmUsIElucHV0LCBPdXRwdXQsIFZpZXdDaGlsZCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ21kLWVkaXRvci1yZXNpemUtc2Vuc29yJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vcmVzaXplLXNlbnNvci5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9yZXNpemUtc2Vuc29yLnNjc3MnXVxyXG59KVxyXG5cclxuZXhwb3J0IGNsYXNzIE1hcmtkb3duRWRpdG9yUmVzaXplU2Vuc29yQ29tcG9uZW50IHtcclxuXHJcbiAgQFZpZXdDaGlsZCgncmVzaXplU2Vuc29yJywgeyBzdGF0aWM6IHRydWUgfSkgcmVzaXplU2Vuc29yOiBFbGVtZW50UmVmO1xyXG5cclxuICBASW5wdXQoKSBpbnRlcnZhbDogbnVtYmVyID0gNTAwO1xyXG4gIEBPdXRwdXQoKSByZXNpemU6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcblxyXG4gIHByaXZhdGUgc2l6ZUluZm86IGFueSA9IHtcclxuICAgIHdpZHRoOiAwLFxyXG4gICAgaGVpZ2h0OiAwXHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9uZ1pvbmU6IE5nWm9uZSkge1xyXG5cclxuICB9XHJcblxyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgIHRoaXMuc2l6ZUluZm8gPSB7XHJcbiAgICAgIHdpZHRoOiB0aGlzLnJlc2l6ZVNlbnNvci5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoLFxyXG4gICAgICBoZWlnaHQ6IHRoaXMucmVzaXplU2Vuc29yLm5hdGl2ZUVsZW1lbnQub2Zmc2V0SGVpZ2h0XHJcbiAgICB9XHJcbiAgICB0aGlzLl9uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICB0aGlzLmRldGVjdFNpemUoKTtcclxuICAgICAgfSwgdGhpcy5pbnRlcnZhbCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZGV0ZWN0U2l6ZSgpIHtcclxuICAgIGxldCB3aWR0aCA9IHRoaXMucmVzaXplU2Vuc29yLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGg7XHJcbiAgICBsZXQgaGVpZ2h0ID0gdGhpcy5yZXNpemVTZW5zb3IubmF0aXZlRWxlbWVudC5vZmZzZXRIZWlnaHQ7XHJcbiAgICBpZiAodGhpcy5zaXplSW5mby53aWR0aCAhPT0gd2lkdGggfHwgdGhpcy5zaXplSW5mby5oZWlnaHQgIT09IGhlaWdodCkge1xyXG4gICAgICB0aGlzLnNpemVJbmZvID0ge1xyXG4gICAgICAgIHdpZHRoOiB3aWR0aCxcclxuICAgICAgICBoZWlnaHQ6IGhlaWdodFxyXG4gICAgICB9XHJcbiAgICAgIHRoaXMucmVzaXplLmVtaXQodGhpcy5zaXplSW5mbyk7XHJcbiAgICB9XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgdGhpcy5kZXRlY3RTaXplKCk7XHJcbiAgICB9LCB0aGlzLmludGVydmFsKTtcclxuICB9XHJcbn1cclxuIl19